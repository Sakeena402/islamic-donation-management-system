(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_next_dist_compiled_@next_react-refresh-utils_dist_072967._.js", {

"[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/ReactRefreshWebpackPlugin.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: require } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// Shared between webpack 4 and 5:
function injectRefreshFunctions(compilation, Template) {
    const hookVars = compilation.mainTemplate.hooks.localVars;
    hookVars.tap('ReactFreshWebpackPlugin', (source)=>Template.asString([
            source,
            '',
            '// noop fns to prevent runtime errors during initialization',
            'if (typeof self !== "undefined") {',
            Template.indent('self.$RefreshReg$ = function () {};'),
            Template.indent('self.$RefreshSig$ = function () {'),
            Template.indent(Template.indent('return function (type) {')),
            Template.indent(Template.indent(Template.indent('return type;'))),
            Template.indent(Template.indent('};')),
            Template.indent('};'),
            '}'
        ]));
}
function webpack4(compiler) {
    const { Template } = this;
    // Webpack 4 does not have a method to handle interception of module
    // execution.
    // The closest thing we have to emulating this is mimicking the behavior of
    // `strictModuleExceptionHandling` in `MainTemplate`:
    // https://github.com/webpack/webpack/blob/4c644bf1f7cb067c748a52614500e0e2182b2700/lib/MainTemplate.js#L200
    compiler.hooks.compilation.tap('ReactFreshWebpackPlugin', (compilation)=>{
        injectRefreshFunctions(compilation, Template);
        const hookRequire = compilation.mainTemplate.hooks.require;
        // @ts-ignore webpack 5 types compat
        hookRequire.tap('ReactFreshWebpackPlugin', (source)=>{
            // Webpack 4 evaluates module code on the following line:
            // ```
            // modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
            // ```
            // https://github.com/webpack/webpack/blob/4c644bf1f7cb067c748a52614500e0e2182b2700/lib/MainTemplate.js#L200
            const lines = source.split('\n');
            // @ts-ignore webpack 5 types compat
            const evalIndex = lines.findIndex((l)=>l.includes('modules[moduleId].call('));
            // Unable to find the module execution, that's OK:
            if (evalIndex === -1) {
                return source;
            }
            // Legacy CSS implementations will `eval` browser code in a Node.js
            // context to extract CSS. For backwards compatibility, we need to check
            // we're in a browser context before continuing.
            return Template.asString([
                ...lines.slice(0, evalIndex),
                `
        var hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
        var cleanup = hasRefresh
          ? self.$RefreshInterceptModuleExecution$(moduleId)
          : function() {};
        try {
        `,
                lines[evalIndex],
                `
        } finally {
          cleanup();
        }
        `,
                ...lines.slice(evalIndex + 1)
            ]);
        });
    });
}
function webpack5(compiler) {
    const { RuntimeGlobals, RuntimeModule, Template } = this;
    class ReactRefreshRuntimeModule extends RuntimeModule {
        constructor(){
            super('react refresh', 5);
        }
        generate() {
            const { runtimeTemplate } = this.compilation;
            return Template.asString([
                `if (${RuntimeGlobals.interceptModuleExecution}) {`,
                `${RuntimeGlobals.interceptModuleExecution}.push(${runtimeTemplate.basicFunction('options', [
                    `${runtimeTemplate.supportsConst() ? 'const' : 'var'} originalFactory = options.factory;`,
                    `options.factory = ${runtimeTemplate.basicFunction('moduleObject, moduleExports, webpackRequire', [
                        // Legacy CSS implementations will `eval` browser code in a Node.js
                        // context to extract CSS. For backwards compatibility, we need to check
                        // we're in a browser context before continuing.
                        `${runtimeTemplate.supportsConst() ? 'const' : 'var'} hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;`,
                        `${runtimeTemplate.supportsConst() ? 'const' : 'var'} cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : ${runtimeTemplate.supportsArrowFunction() ? '() => {}' : 'function() {}'};`,
                        'try {',
                        Template.indent('originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'),
                        '} finally {',
                        Template.indent(`cleanup();`),
                        '}'
                    ])}`
                ])})`,
                '}'
            ]);
        }
    }
    // @ts-ignore webpack 5 types compat
    compiler.hooks.compilation.tap('ReactFreshWebpackPlugin', (compilation)=>{
        injectRefreshFunctions(compilation, Template);
        compilation.hooks.additionalTreeRuntimeRequirements.tap('ReactFreshWebpackPlugin', (chunk)=>{
            compilation.addRuntimeModule(chunk, new ReactRefreshRuntimeModule());
        });
    });
}
class ReactFreshWebpackPlugin {
    constructor({ version, RuntimeGlobals, RuntimeModule, Template } = (()=>{
        const e = new Error("Cannot find module 'webpack'");
        e.code = 'MODULE_NOT_FOUND';
        throw e;
    })()){
        this.webpackMajorVersion = parseInt(version !== null && version !== void 0 ? version : '', 10);
        this.RuntimeGlobals = RuntimeGlobals;
        this.RuntimeModule = RuntimeModule;
        this.Template = Template;
    }
    apply(compiler) {
        switch(this.webpackMajorVersion){
            case 4:
                {
                    webpack4.call(this, compiler);
                    break;
                }
            case 5:
                {
                    webpack5.call(this, compiler);
                    break;
                }
            default:
                {
                    throw new Error(`ReactFreshWebpackPlugin does not support webpack v${this.webpackMajorVersion}.`);
                }
        }
    }
}
exports.default = ReactFreshWebpackPlugin; //# sourceMappingURL=ReactRefreshWebpackPlugin.js.map
}}),
"[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/ReactRefreshModule.runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: require } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = default_1;
// This function gets unwrapped into global scope, which is why we don't invert
// if-blocks. Also, you cannot use `return`.
function default_1() {
    // Wrapped in an IIFE to avoid polluting the global scope
    ;
    (function() {
        var _a, _b;
        // Legacy CSS implementations will `eval` browser code in a Node.js context
        // to extract CSS. For backwards compatibility, we need to check we're in a
        // browser context before continuing.
        if (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
            // @ts-ignore __webpack_module__ is global
            var currentExports = __webpack_module__.exports;
            // @ts-ignore __webpack_module__ is global
            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;
            // This cannot happen in MainTemplate because the exports mismatch between
            // templating and execution.
            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);
            // A module can be accepted automatically based on its exports, e.g. when
            // it is a Refresh Boundary.
            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
                // Save the previous exports signature on update so we can compare the boundary
                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)
                __webpack_module__.hot.dispose(function(data) {
                    data.prevSignature = self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);
                });
                // Unconditionally accept an update to this module, we'll check if it's
                // still a Refresh Boundary later.
                // @ts-ignore importMeta is replaced in the loader
                global.importMeta.webpackHot.accept();
                // This field is set when the previous version of this module was a
                // Refresh Boundary, letting us know we need to check for invalidation or
                // enqueue an update.
                if (prevSignature !== null) {
                    // A boundary can become ineligible if its exports are incompatible
                    // with the previous exports.
                    //
                    // For example, if you add/remove/change exports, we'll want to
                    // re-execute the importing modules, and force those components to
                    // re-render. Similarly, if you convert a class component to a
                    // function, we want to invalidate the boundary.
                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {
                        __webpack_module__.hot.invalidate();
                    } else {
                        self.$RefreshHelpers$.scheduleUpdate();
                    }
                }
            } else {
                // Since we just executed the code for the module, it's possible that the
                // new exports made it ineligible for being a boundary.
                // We only care about the case when we were _previously_ a boundary,
                // because we already accepted this update (accidental side effect).
                var isNoLongerABoundary = prevSignature !== null;
                if (isNoLongerABoundary) {
                    __webpack_module__.hot.invalidate();
                }
            }
        }
    })();
} //# sourceMappingURL=ReactRefreshModule.runtime.js.map
}}),
"[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/loader.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: require } = __turbopack_context__;
{
"use strict";
var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
const ReactRefreshModule_runtime_1 = __importDefault(__turbopack_require__("[project]/node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/ReactRefreshModule.runtime.js [app-client] (ecmascript)"));
let refreshModuleRuntime = ReactRefreshModule_runtime_1.default.toString();
refreshModuleRuntime = refreshModuleRuntime.slice(refreshModuleRuntime.indexOf('{') + 1, refreshModuleRuntime.lastIndexOf('}'))// Given that the import above executes the module we need to make sure it does not crash on `import.meta` not being allowed.
.replace('global.importMeta', 'import.meta');
let commonJsrefreshModuleRuntime = refreshModuleRuntime.replace('import.meta.webpackHot', 'module.hot');
const ReactRefreshLoader = function ReactRefreshLoader(source, inputSourceMap) {
    this.callback(null, `${source}\n\n;${// Account for commonjs not supporting `import.meta
    this.resourcePath.endsWith('.cjs') ? commonJsrefreshModuleRuntime : refreshModuleRuntime}`, inputSourceMap);
};
exports.default = ReactRefreshLoader; //# sourceMappingURL=loader.js.map
}}),
}]);

//# sourceMappingURL=node_modules_next_dist_compiled_%40next_react-refresh-utils_dist_072967._.js.map
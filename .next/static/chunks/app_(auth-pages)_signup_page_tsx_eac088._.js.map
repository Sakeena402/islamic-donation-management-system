{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/%28auth-pages%29/signup/page.tsx"],"sourcesContent":["// SignupPage.tsx\r\n'use client';\r\nimport React, { useState } from \"react\";\r\nimport GeneralForm from \"@/components/forms/GeneralForm\";\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"next/router\";\r\nimport AuthLayout from \"@/components/AuthLayout\";\r\nimport { signupSchema } from \"@/schemas/validationSchema\";\r\n\r\nconst SignupPage = () => {\r\n  const router = useRouter();\r\n  const [signupError, setSignupError] = useState<string | null>(null);\r\n\r\n  const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n    try {\r\n      const response = await axios.post(\"/api/auth/signup\", user);\r\n      console.log(\"Signup successful\");\r\n      router.push(\"/login\");\r\n    } catch (error: any) {\r\n      if (error.response && error.response.status === 409) {\r\n        // If user already exists, show a message in the form\r\n        setSignupError(\"A user with this email already exists. Please use a different email.\");\r\n      } else {\r\n        setSignupError(\"Signup failed. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthLayout backgroundImage=\"https://wallpapers.com/images/hd/1920-x-1080-hd-c65hirjqswhsd1z3.jpg\">\r\n      <GeneralForm\r\n        fields={[\r\n          { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n          { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n          { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n          { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n          { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n        ]}\r\n        buttonText=\"Create Your Account\"\r\n        onSubmit={onSignUp}\r\n        validationSchema={signupSchema}\r\n      />\r\n      {signupError && <p className=\"text-red-600 text-center mt-4\">{signupError}</p>}\r\n    </AuthLayout>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // SignupPage.tsx\r\n// 'use client'\r\n// import React, { useState } from \"react\";\r\n// import GeneralForm from \"@/components/forms/GeneralForm\";\r\n// import axios from \"axios\";\r\n// import router from \"next/router\";\r\n// import AuthLayout from \"@/components/AuthLayout\"; \r\n// import { signupSchema } from \"@/schemas/validationSchema\";\r\n\r\n// const SignupPage = () => {\r\n//   const [serverError, setServerError] = useState<string | null>(null);\r\n\r\n//   const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n//     try {\r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup successful\");\r\n//       router.push('/login');\r\n//     } catch (error: any) {\r\n//       if (error.response?.data?.error) {\r\n//         setServerError(error.response.data.error);\r\n//       } else {\r\n//         setServerError(\"Signup failed. Please try again.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <AuthLayout backgroundImage=\"https://wallpapers.com/images/hd/1920-x-1080-hd-c65hirjqswhsd1z3.jpg\">\r\n//       <GeneralForm\r\n//         fields={[\r\n//           { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n//           { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n//           { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n//           { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n//           { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n//         ]}\r\n//         buttonText=\"Create Your Account\"\r\n//         onSubmit={onSignUp}\r\n//         validationSchema={signupSchema}\r\n//         serverError={serverError}\r\n//       />\r\n//       {signupError && <p className=\"text-red-600 text-center mt-4\">{signupError}</p>}\r\n//     </AuthLayout>\r\n//   );\r\n// };\r\n\r\n// export default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 'use client'\r\n\r\n// import React from \"react\";\r\n// import GeneralForm from \"@/components/forms/GeneralForm\";\r\n// import axios from \"axios\";\r\n// import router from \"next/router\";\r\n\r\n\r\n\r\n// const SignupPage = () => {\r\n  \r\n//   const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n\r\n//     try {\r\n    \r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup sucess\")\r\n//       router.push('/login'); \r\n//     } catch (error:any) {\r\n//       console.log(\"Signup failed\", error.message);\r\n      \r\n  \r\n//   }\r\n \r\n\r\n//   };\r\n\r\n  \r\n//   return (\r\n//     <GeneralForm\r\n//       fields={[\r\n//         { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n//         { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n//         { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n//         { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n//         { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n//       ]}\r\n//       buttonText=\"Create Your Account\"\r\n//       onSubmit={onSignUp}\r\n//       redirectPath=\"/login\" // Redirect after successful signup\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// /* eslint-disable @typescript-eslint/no-unused-vars */\r\n// 'use client'\r\n// import { useState,useEffect } from \"react\";\r\n// import Link from \"next/link\";\r\n// import { useRouter } from \"next/navigation\";\r\n// import axios from 'axios';\r\n// import React from \"react\";\r\n\r\n// const SignUp = () => {\r\n//   const [user, setUser] = useState({\r\n//     username: '',\r\n//     email: '',\r\n//     phoneNo: '',\r\n//     address: '',\r\n//     password: '',\r\n \r\n//   });\r\n// const [buttonDisabled,setButtonDisabled]  = useState(false)\r\n// const [loading,setLoading]=useState(false)\r\n// const router = useRouter();\r\n\r\n// useEffect(() => {\r\n//   if(user.email.length > 0 && user.password.length > 0 && user.username.length > 0) {\r\n//       setButtonDisabled(false);\r\n//   } else {\r\n//       setButtonDisabled(true);\r\n//   }\r\n// }, [user]);\r\n\r\n//   const onSignUp = async () => {\r\n\r\n//     try {\r\n//       setLoading(true)\r\n//       setButtonDisabled(true)\r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup sucess\")\r\n//       router.push('/login'); \r\n//     } catch (error:any) {\r\n//       console.log(\"Signup failed\", error.message);\r\n      \r\n  \r\n//   }finally {\r\n//     setTimeout(() => {\r\n//       setLoading(false);\r\n//       setButtonDisabled(false);\r\n//   }, 1000);\r\n//   }\r\n \r\n\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n//       <div className=\"w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md\">\r\n//         <h2 className=\"text-2xl font-bold text-center text-gray-800\">\r\n//           Create Your Account\r\n//         </h2>\r\n//         <form className=\"space-y-6\">\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Full Name\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.username}\r\n//               onChange={(e) => setUser({ ...user, username: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 border text-gray-700 rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Email\r\n//             </label>\r\n//             <input\r\n//               type=\"email\"\r\n//               value={user.email}\r\n//               onChange={(e) => setUser({ ...user, email: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1  text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Phone Number\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.phoneNo}\r\n//               onChange={(e) => setUser({ ...user, phoneNo: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Address\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.address}\r\n//               onChange={(e) => setUser({ ...user, address: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Password\r\n//             </label>\r\n//             <input\r\n//               type=\"password\"\r\n//               value={user.password}\r\n//               onChange={(e) => setUser({ ...user, password: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n         \r\n//           <button\r\n//             type=\"button\"\r\n//             onClick={onSignUp}\r\n//             disabled={buttonDisabled}\r\n//             className={`w-full px-4 py-2 font-semibold text-white rounded-md focus:outline-none focus:ring focus:ring-indigo-200 ${\r\n//                 buttonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'\r\n//             }`}\r\n//         >\r\n//             {loading ? 'Processing...' : 'Sign Up'}\r\n//         </button>\r\n\r\n//         </form>\r\n//         <p className=\"text-sm text-center text-gray-600\">\r\n//           Already have an account?{\" \"}\r\n//           <Link href=\"/login\" className=\"text-indigo-600 hover:underline\">\r\n//            Login\r\n//           </Link>\r\n//         </p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SignUp;\r\n// app/signup/page.tsx// app/signup/page.tsx"],"names":[],"mappings":"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"}},
    {"offset": {"line": 321, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
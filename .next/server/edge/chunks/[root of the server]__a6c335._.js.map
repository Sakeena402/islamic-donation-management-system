{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/helpers/getDataFromToken.ts"],"sourcesContent":["// import { NextRequest } from \"next/server\";\n// import jwt from \"jsonwebtoken\";\n// export const getDataFromToken = (request: NextRequest) => {\n//     try {\n//       const token = request.cookies.get(\"token\")?.value || '';\n//       const decodedToken: any = jwt.verify(token, process.env.TOKEN_SECRET!);\n  \n//       // Assuming the token contains both `id` and `role`\n//       return { id: decodedToken.id, role: decodedToken.role, username: decodedToken.username };\n//     } catch (error: any) {\n//       throw new Error(error.message);\n//     }\n//   };\n\nimport { NextRequest } from \"next/server\";\nimport jwt from \"jsonwebtoken\";\n\nexport const getDataFromToken = (request: NextRequest) => {\n  try {\n    const token = request.cookies.get(\"token\")?.value || '';\n    if (!token) throw new Error(\"Token not found\");\n\n    const decodedToken: any = jwt.verify(token, process.env.JWT_SECRET_KEY!);\n    return { id: decodedToken.id, role: decodedToken.role, username: decodedToken.username };  // Extract user details\n  } catch (error) {\n    throw new Error(error.message || \"Token verification failed\");\n  }\n};\n"],"names":[],"mappings":"AAAA,6CAA6C;AAC7C,kCAAkC;AAClC,8DAA8D;AAC9D,YAAY;AACZ,iEAAiE;AACjE,gFAAgF;AAEhF,4DAA4D;AAC5D,kGAAkG;AAClG,6BAA6B;AAC7B,wCAAwC;AACxC,QAAQ;AACR,OAAO;;;;AAGP;;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI;QACF,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAAS;QACrD,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;QAE5B,MAAM,eAAoB,qIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO,QAAQ,GAAG,CAAC,cAAc;QACtE,OAAO;YAAE,IAAI,aAAa,EAAE;YAAE,MAAM,aAAa,IAAI;YAAE,UAAU,aAAa,QAAQ;QAAC,GAAI,uBAAuB;IACpH,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM,MAAM,OAAO,IAAI;IACnC;AACF"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["// src/middleware.ts\n\nimport { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { getDataFromToken } from \"@/helpers/getDataFromToken\";\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n  const isPublicPath = ['/login', '/signup', '/verifyemail'].includes(path);\n  const token = request.cookies.get('token')?.value || '';\n\n  let userRole = '';\n\n  // Check if token exists and extract user role\n  if (token) {\n    try {\n      const { id,role,username } = await getDataFromToken(request);\n      userRole = role;\n    } catch (error) {\n      return NextResponse.redirect(new URL('/login', request.nextUrl));\n    }\n  }\n\n  // Define role-based access\n  const rolePaths = {\n    admin: ['/admin', '/profile', '/dashboard'],\n    user: ['/profile', '/dashboard', '/user'],\n    organizer: ['/organizer', '/profile', '/events'],\n  };\n\n  const isAuthorized = (role: string, path: string) => {\n    return rolePaths[role]?.includes(path) || isPublicPath;\n  };\n\n  // Redirect based on user authentication and authorization\n  if (isPublicPath && token) {\n    return NextResponse.redirect(new URL('/', request.nextUrl));\n  }\n\n  if (!isPublicPath && !token) {\n    return NextResponse.redirect(new URL('/login', request.nextUrl));\n  }\n\n  if (!isAuthorized(userRole, path)) {\n    return NextResponse.redirect(new URL('/', request.nextUrl));\n  }\n}\n\n// Configuration to match paths\nexport const config = {\n  matcher: ['/', '/profile', '/login', '/signup', '/verifyemail', '/admin', '/user', '/organizer']\n};\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;AAEpB;AAEA;AAFA;;;AAIO,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IACrC,MAAM,eAAe;QAAC;QAAU;QAAW;KAAe,CAAC,QAAQ,CAAC;IACpE,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAAS;IAErD,IAAI,WAAW;IAEf,8CAA8C;IAC9C,IAAI,OAAO;QACT,IAAI;YACF,MAAM,EAAE,EAAE,EAAC,IAAI,EAAC,QAAQ,EAAE,GAAG,MAAM,CAAA,GAAA,2HAAA,CAAA,mBAAgB,AAAD,EAAE;YACpD,WAAW;QACb,EAAE,OAAO,OAAO;YACd,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,OAAO;QAChE;IACF;IAEA,2BAA2B;IAC3B,MAAM,YAAY;QAChB,OAAO;YAAC;YAAU;YAAY;SAAa;QAC3C,MAAM;YAAC;YAAY;YAAc;SAAQ;QACzC,WAAW;YAAC;YAAc;YAAY;SAAU;IAClD;IAEA,MAAM,eAAe,CAAC,MAAc;QAClC,OAAO,SAAS,CAAC,KAAK,EAAE,SAAS,SAAS;IAC5C;IAEA,0DAA0D;IAC1D,IAAI,gBAAgB,OAAO;QACzB,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,OAAO;IAC3D;IAEA,IAAI,CAAC,gBAAgB,CAAC,OAAO;QAC3B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,OAAO;IAChE;IAEA,IAAI,CAAC,aAAa,UAAU,OAAO;QACjC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,OAAO;IAC3D;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAK;QAAY;QAAU;QAAW;QAAgB;QAAU;QAAS;KAAa;AAClG"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
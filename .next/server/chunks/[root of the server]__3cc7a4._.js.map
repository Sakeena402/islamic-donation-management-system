{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/models/userModel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose'\r\n\r\n\r\nconst userSchema= new mongoose.Schema({\r\nusername:{\r\n    type:String,\r\n    required:[true,'Please enter your name'],\r\n},\r\nemail: {\r\n    type: String,\r\n    required: [true, 'Please enter your email'],\r\n    unique: true,\r\n   // match: [/.+@.+\\..+/, 'Please enter a valid email address'], \r\n   // maxlength: [50, 'Email cannot be longer than 50 characters']\r\n},\r\npassword: {\r\n    type: String,\r\n    required: [true, 'Please enter your password'],\r\n   \r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Password must contain at least one uppercase, one lowercase, one number, and one special character\r\n    //         return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(value);\r\n    //     },\r\n    //     message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\r\n    // }\r\n},\r\n\r\naddress: {\r\n    type: String,\r\n    required: [true, 'Please enter your address'],\r\n    trim: true \r\n},\r\nphoneNo: {\r\n    type: String,\r\n    required: [true, 'Please enter your phone number'],\r\n    unique: true,\r\n  //  match: [/^\\d{10,15}$/, 'Phone number must be between 10 and 15 digits'], // Ensures phone number has only digits and is the correct length\r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Check for any unwanted characters (only digits allowed)\r\n    //         return /^\\d+$/.test(value);\r\n    //     },\r\n    //     message: 'Phone number must contain only digits'\r\n    // }\r\n},\r\nrole: {\r\n    type: String,\r\n    enum: ['Admin', 'Donor', 'Organizer'],\r\n    default: 'Donor',\r\n    required: [true, 'Please specify a role']\r\n}, \r\nisVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n},\r\nstatus:{\r\n    type:String,\r\n    enum:['Active','Inactive'],\r\n    default:'Active'\r\n},\r\nforgotPasswordToken: String,\r\nforgotPasswordTokenExpiry: Date,\r\nverifyToken: String,\r\nverifyTokenExpiry: Date,\r\n\r\n})\r\nconst User = mongoose.models.user || mongoose.model('user', userSchema);\r\nexport default User;"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAGA,MAAM,aAAY,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAS;QACL,MAAK;QACL,UAAS;YAAC;YAAK;SAAyB;IAC5C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IAGZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IASlD;IAEA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,MAAM;IACV;IACA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,QAAQ;IASZ;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;SAAY;QACrC,SAAS;QACT,UAAU;YAAC;YAAM;SAAwB;IAC7C;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,QAAO;QACH,MAAK;QACL,MAAK;YAAC;YAAS;SAAW;QAC1B,SAAQ;IACZ;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AAEnB;AACA,MAAM,OAAO,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 187, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/auth/login/route.ts"],"sourcesContent":["// // /app/api/auth/login/route.ts (or your relevant path)\r\n// import connectDB from '@/dbConfig/dbConfig';\r\n// import User from '@/models/userModel';\r\n// import { NextResponse, NextRequest } from 'next/server';\r\n// import bcryptjs from 'bcryptjs';\r\n// import jwt from 'jsonwebtoken';\r\n\r\n// connectDB();\r\n\r\n// export async function POST(request: NextRequest) {\r\n//     try {\r\n//         const reqBody = await request.json();\r\n//         const { email, password } = reqBody;\r\n\r\n//         // Validation\r\n//         if (!email || !password) {\r\n//             return NextResponse.json(\r\n//                 { error: \"Email and password are required\" },\r\n//                 { status: 400 }\r\n//             );\r\n//         }\r\n\r\n//         const user = await User.findOne({ email });\r\n//         if (!user) {\r\n//             return NextResponse.json(\r\n//                 { error: \"User doesn't exist\" },\r\n//                 { status: 400 }\r\n//             );\r\n//         }\r\n//         if (!user.isVerified) {\r\n//             return NextResponse.json(\r\n//               { error: \"Please verify your email to log in\" },\r\n//               { status: 401 }\r\n//             );\r\n//           }\r\n\r\n//         // Check if password is correct\r\n//         const validPassword = await bcryptjs.compare(password, user.password);\r\n//         if (!validPassword) {\r\n//             return NextResponse.json(\r\n//                 { error: \"Invalid password\" },\r\n//                 { status: 400 }\r\n//             );\r\n//         }\r\n\r\n//         // Create token\r\n//         const tokenData = {\r\n//             id: user._id,\r\n//             username: user.username,\r\n//             email: user.email,\r\n//             role: user.role\r\n//         };\r\n//         const token = await jwt.sign(tokenData, process.env.JWT_SECRET_KEY!, { expiresIn: '1d' });\r\n\r\n//         const response = NextResponse.json({\r\n//             message: \"User login successfully\",\r\n//             success: true,\r\n//             status: 201\r\n//         });\r\n//         response.cookies.set(\"token\", token, {\r\n//             httpOnly: true,\r\n//         });\r\n//         return response;\r\n//     } catch (error: any) {\r\n//         console.error('Server error:', error);\r\n//         return NextResponse.json(\r\n//             { error: error.message || 'Server error' },\r\n//             { status: 500 }\r\n//         );\r\n//     }\r\n// }\r\n\r\n\r\n// /app/api/auth/login/route.ts\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcryptjs from 'bcryptjs';\r\nimport connectDB from '@/dbConfig/dbConfig';\r\nimport User from '@/models/userModel';\r\n\r\nconnectDB();\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { email, password } = await request.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: 'Email and password are required' }, { status: 400 });\r\n    }\r\n\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"User doesn't exist\" }, { status: 400 });\r\n    }\r\n\r\n    if (!user.isVerified) {\r\n      return NextResponse.json({ error: 'Please verify your email to log in' }, { status: 401 });\r\n    }\r\n\r\n    const validPassword = await bcryptjs.compare(password, user.password);\r\n    if (!validPassword) {\r\n      return NextResponse.json({ error: 'Invalid password' }, { status: 400 });\r\n    }\r\n\r\n    // Create JWT token\r\n    const tokenData = { id: user._id, role: user.role, username: user.username, email: user.email };\r\n    const token = jwt.sign(tokenData, process.env.JWT_SECRET_KEY!, { expiresIn: '1d' });\r\n\r\n    // Create response and set the cookie\r\n    const response = NextResponse.json({ success: true, message: 'Login successful' });\r\n\r\n    // Set the token cookie\r\n    response.cookies.set('token', token, {\r\n      httpOnly: true, // Prevent JavaScript access to cookies\r\n      path: '/', // Make cookie accessible across the site\r\n      maxAge: 24 * 60 * 60, // 1 day in seconds\r\n      secure: process.env.NODE_ENV === 'production', // Set Secure flag only in production (only send cookie over HTTPS)\r\n      sameSite: 'Strict', // Prevent CSRF attacks\r\n    });\r\n\r\n    return response;\r\n  } catch (error: any) {\r\n    console.error('Error in login API:', error.message); // Logging for better debugging\r\n    return NextResponse.json({ error: 'Server error' }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
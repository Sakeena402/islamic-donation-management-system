{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/%28campaign%29/campaignCards/page.tsx"],"sourcesContent":["// 'use client';\r\n\r\n// import { useState, useEffect } from 'react';\r\n// import { motion } from 'framer-motion';\r\n// import CampaignCard from '@/components/CampaignCard';\r\n// import CampaignList from '@/components/CampaignList';\r\n\r\n// const CampaignPage: React.FC = () => {\r\n//   const [campaigns, setCampaigns] = useState<any[]>([]);\r\n//   const [isLoading, setIsLoading] = useState<boolean>(true);\r\n//   const [error, setError] = useState<string | null>(null);\r\n\r\n//   // Fetch campaigns from the backend API\r\n//   useEffect(() => {\r\n//     // Make sure to replace '/api/campaigns' with your actual backend endpoint\r\n//     fetch('/api/campaign')\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         setCampaigns(data);\r\n//         setIsLoading(false);\r\n//       }) \r\n//       .catch((err) => {\r\n//         setError('Failed to load campaigns');\r\n//         setIsLoading(false);\r\n//       });\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"mx-auto px-7 m-12 py-15\">\r\n//       {/* Section for Heading */}\r\n//       <motion.section\r\n//         className=\"text-center mb-10\"\r\n//         initial={{ opacity: 0, y: 40 }}\r\n//         whileInView={{ opacity: 1, y: 0 }}\r\n//         transition={{ duration: 1 }}\r\n//         viewport={{ once: false, amount: 0.2 }}\r\n//       >\r\n//         <h2 className=\"text-2xl pt-5 text-center font-bold font-serif mb-6 md:text-5xl\" style={{ textShadow: '2px 2px 4px rgba(0, 0, 0, 0.6)' }}>\r\n//           Hope in Healing: Donate to Save Them!\r\n//         </h2>\r\n//       </motion.section>\r\n\r\n//       {/* Loading State */}\r\n//       {isLoading ? (\r\n//         <div className=\"text-center text-lg text-gray-500\">Loading campaigns...</div>\r\n//       ) : error ? (\r\n//         <div className=\"text-center text-lg text-red-500\">{error}</div>\r\n//       ) : (\r\n//         <motion.section\r\n//           className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10 gap-y-12\"\r\n//           initial={{ opacity: 0 }}\r\n//           whileInView={{ opacity: 1 }}\r\n//           transition={{ duration: 1 }}\r\n//           viewport={{ once: false, amount: 0.2 }}\r\n//         >\r\n//           {/* Render each campaign card */}\r\n//           {campaigns.map((campaign, index) => (\r\n//             <motion.div\r\n//               key={index}\r\n//               initial={{ opacity: 0, y: 40 }}\r\n//               whileInView={{ opacity: 1, y: 0 }}\r\n//               transition={{ duration: 0.8, delay: index * 0.2 }}\r\n//               viewport={{ once: false, amount: 0.2 }}\r\n//             >\r\n//               <CampaignList campaign={campaign} />\r\n//             </motion.div>\r\n//           ))}\r\n//         </motion.section>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CampaignPage;\r\n\r\n\r\n\r\n\r\n'use clien'\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport CampaignList from './CampaignList'; // Assuming this is your component that renders each campaign\r\n\r\nconst CampaignPage = () => {\r\n  const [campaigns, setCampaigns] = useState<any[]>([]); // Default state is an empty array\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch campaigns from API\r\n    fetch('/api/campaign')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (Array.isArray(data)) {\r\n          setCampaigns(data); // Set campaigns if data is an array\r\n        } else if (data.campaigns && Array.isArray(data.campaigns)) {\r\n          setCampaigns(data.campaigns); // If API returns { campaigns: [...] }\r\n        } else {\r\n          setError('Unexpected response format'); // Handle if the response is not an array\r\n        }\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        setError('Failed to load campaigns'); // Handle fetch errors\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  // Render the UI based on loading, error, and campaigns state\r\n  return (\r\n    <div className=\"container\">\r\n      {isLoading ? (\r\n        <div className=\"text-center text-lg text-gray-500\">Loading campaigns...</div>\r\n      ) : error ? (\r\n        <div className=\"text-center text-lg text-red-500\">{error}</div>\r\n      ) : campaigns.length === 0 ? (\r\n        <div className=\"text-center text-lg text-gray-500\">No campaigns available</div>\r\n      ) : (\r\n        <motion.section\r\n          className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10 gap-y-12\"\r\n          initial={{ opacity: 0 }}\r\n          whileInView={{ opacity: 1 }}\r\n          transition={{ duration: 1 }}\r\n          viewport={{ once: false, amount: 0.2 }}\r\n        >\r\n          {campaigns.map((campaign, index) => (\r\n            <motion.div\r\n              key={index}\r\n              initial={{ opacity: 0, y: 40 }}\r\n              whileInView={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.8, delay: index * 0.2 }}\r\n              viewport={{ once: false, amount: 0.2 }}\r\n            >\r\n              <CampaignList campaign={campaign} />\r\n            </motion.div>\r\n          ))}\r\n        </motion.section>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampaignPage;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
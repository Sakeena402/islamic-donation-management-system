{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/forms/SubmitButton.tsx"],"sourcesContent":["// components/SubmitButton.tsx\r\n'use clien'\r\nimport React from \"react\";\r\n\r\ninterface SubmitButtonProps {\r\n  loading: boolean;\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst SubmitButton: React.FC<SubmitButtonProps> = ({ loading, text, onClick }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      disabled={loading}\r\n      className={`w-full px-4 py-2 font-semibold text-white rounded-md focus:outline-none ${\r\n        loading ? \"bg-gray-400 cursor-not-allowed\" : \"bg-indigo-600 hover:bg-indigo-700\"\r\n      }`}\r\n    >\r\n      {loading ? \"Processing...\" : text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SubmitButton;\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAC9B;;AASA,MAAM,eAA4C,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;IAC3E,qBACE,8OAAC;QACC,SAAS;QACT,UAAU;QACV,WAAW,CAAC,wEAAwE,EAClF,UAAU,mCAAmC,qCAC7C;kBAED,UAAU,kBAAkB;;;;;;AAGnC;uCAEe"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/hooks/useFormValidation.ts"],"sourcesContent":["// /hooks/useFormValidation.ts\r\nimport { useState } from \"react\";\r\nimport { AnyObjectSchema } from \"yup\";\r\n\r\nconst useFormValidation = (schema: AnyObjectSchema) => {\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n\r\n  const validate = async (data: { [key: string]: string }) => {\r\n    try {\r\n      await schema.validate(data, { abortEarly: false });\r\n      setErrors({});\r\n      return true;\r\n    } catch (err) {\r\n      const validationErrors: { [key: string]: string } = {};\r\n      if (err.inner) {\r\n        err.inner.forEach((error: any) => {\r\n          validationErrors[error.path] = error.message;\r\n        });\r\n      }\r\n      setErrors(validationErrors);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return { errors, validate };\r\n};\r\n\r\nexport default useFormValidation;\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;;AAGA,MAAM,oBAAoB,CAAC;IACzB,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA6B,CAAC;IAEjE,MAAM,WAAW,OAAO;QACtB,IAAI;YACF,MAAM,OAAO,QAAQ,CAAC,MAAM;gBAAE,YAAY;YAAM;YAChD,UAAU,CAAC;YACX,OAAO;QACT,EAAE,OAAO,KAAK;YACZ,MAAM,mBAA8C,CAAC;YACrD,IAAI,IAAI,KAAK,EAAE;gBACb,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;oBACjB,gBAAgB,CAAC,MAAM,IAAI,CAAC,GAAG,MAAM,OAAO;gBAC9C;YACF;YACA,UAAU;YACV,OAAO;QACT;IACF;IAEA,OAAO;QAAE;QAAQ;IAAS;AAC5B;uCAEe"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/forms/GeneralForm.tsx"],"sourcesContent":["// components/forms/GeneralForm.tsx\r\n'use client'\r\nimport React, { useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport SubmitButton from \"@/components/forms/SubmitButton\";\r\nimport { FiEye, FiEyeOff } from \"react-icons/fi\";\r\nimport { IconContext } from \"react-icons\";\r\nimport useFormValidation from \"@/hooks/useFormValidation\";\r\nimport { AnyObjectSchema } from \"yup\";\r\n\r\ninterface Field {\r\n  name: string;\r\n  label: string;\r\n  type: string;\r\n  required?: boolean;\r\n}\r\n\r\ninterface GeneralFormProps {\r\n  fields: Field[];\r\n  buttonText: string;\r\n  onSubmit: (formData: { [key: string]: string }) => Promise<void>;\r\n  validationSchema: AnyObjectSchema; \r\n  errorMessage?: string|null // Prop for displaying error messages\r\n}\r\n\r\nconst GeneralForm: React.FC<GeneralFormProps> = ({\r\n  fields,\r\n  buttonText,\r\n  onSubmit,\r\n  validationSchema,\r\n  errorMessage, // Accept error message\r\n}) => {\r\n  const router = useRouter();\r\n  const [formData, setFormData] = useState<{ [key: string]: string }>(\r\n    fields.reduce((acc, field) => ({ ...acc, [field.name]: \"\" }), {})\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const { errors, validate } = useFormValidation(validationSchema);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const isValid = await validate(formData);\r\n    if (!isValid) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await onSubmit(formData);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setShowPassword((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md\">\r\n      <h2 className=\"text-2xl font-bold text-center text-gray-800\">{buttonText}</h2>\r\n\r\n      <form className=\"space-y-4\" onSubmit={handleSubmit}>\r\n        {fields.map((field) => (\r\n          <div key={field.name} className=\"relative\">\r\n            <label className=\"block text-sm font-medium text-gray-700\">{field.label}</label>\r\n            <input\r\n              type={field.type === \"password\" && showPassword ? \"text\" : field.type}\r\n              name={field.name}\r\n              value={formData[field.name]}\r\n              onChange={handleChange}\r\n              required={field.required}\r\n              className={`w-full px-3 py-2 mt-1 border rounded-md text-gray-700 focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500 ${\r\n                errors[field.name] ? \"border-red-600\" : \"\"\r\n              }`}\r\n              placeholder={`Enter your ${field.label.toLowerCase()}`}\r\n            />\r\n            {errors[field.name] && (\r\n              <p className=\"text-sm text-red-600\">{errors[field.name]}</p>\r\n            )}\r\n            {field.type === \"password\" && (\r\n              <IconContext.Provider value={{ className: \"absolute top-2/3 right-7 transform -translate-y-1/2 text-gray-400\" }}>\r\n                <button type=\"button\" onClick={togglePasswordVisibility} aria-label=\"Toggle password visibility\">\r\n                  {showPassword ? <FiEyeOff /> : <FiEye />}\r\n                </button>\r\n              </IconContext.Provider>\r\n            )}\r\n          </div>\r\n        ))}\r\n        <div>      {errorMessage && <p className=\"text-red-600 text-center\">{errorMessage}</p>}</div>\r\n        <SubmitButton loading={loading} text={buttonText} onClick={handleSubmit} />\r\n      </form>\r\n      <p className=\"text-sm text-center text-gray-600\">\r\n        {buttonText === \"Create Your Account\" ? (\r\n          <>\r\n            Already have an account?{\" \"}\r\n            <a href=\"/login\" className=\"text-indigo-600 hover:underline\">Login</a>\r\n          </>\r\n        ) : (\r\n          <>\r\n            Don't have an account?{\" \"}\r\n            <a href=\"/signup\" className=\"text-indigo-600 hover:underline\">Sign Up</a>\r\n          </>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // GeneralForm.tsx\r\n// 'use client'\r\n// import React, { useState } from \"react\";\r\n// import { useRouter } from \"next/navigation\";\r\n// import SubmitButton from \"@/components/forms/SubmitButton\";\r\n\r\n// interface Field {\r\n//   name: string;\r\n//   label: string;\r\n//   type: string;\r\n//   required?: boolean;\r\n// }\r\n\r\n// interface GeneralFormProps {\r\n//   fields: Field[];\r\n//   buttonText: string;\r\n//   onSubmit: (formData: { [key: string]: string }) => Promise<void>;\r\n//   redirectPath: string;\r\n//   switchForm: () => void; // Function to switch forms\r\n// }\r\n\r\n// const GeneralForm: React.FC<GeneralFormProps> = ({\r\n//   fields,\r\n//   buttonText,\r\n//   onSubmit,\r\n//   redirectPath,\r\n//   switchForm,\r\n// }) => {\r\n//   const router = useRouter();\r\n//   const [formData, setFormData] = useState<{ [key: string]: string }>(\r\n//     fields.reduce((acc, field) => ({ ...acc, [field.name]: \"\" }), {})\r\n//   );\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState<string | null>(null);\r\n\r\n//   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleSubmit = async () => {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       await onSubmit(formData);\r\n//       router.push(redirectPath);\r\n//     } catch (error) {\r\n//       setError(\"Submission failed. Please try again.\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"form-container\">\r\n//       <h2 className=\"text-2xl font-bold text-center text-gray-800\">{buttonText}</h2>\r\n//       {error && <p className=\"text-center text-red-600\">{error}</p>}\r\n//       <form className=\"space-y-4\">\r\n//         {fields.map((field) => (\r\n//           <div key={field.name}>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">{field.label}</label>\r\n//             <input\r\n//               type={field.type}\r\n//               name={field.name}\r\n//               value={formData[field.name]}\r\n//               onChange={handleChange}\r\n//               required={field.required}\r\n//               className=\"w-full px-3 py-2 mt-1 border rounded-md text-gray-700 focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//         <SubmitButton\r\n//           loading={loading}\r\n//           text={buttonText}\r\n//           onClick={handleSubmit}\r\n//         />\r\n//       </form>\r\n//       <p className=\"text-sm text-center text-gray-600\">\r\n//         {buttonText === \"Create Your Account\" ? (\r\n//           <>\r\n//             Already have an account?{\" \"}\r\n//             <button className=\"text-indigo-600 hover:underline\" onClick={switchForm}>\r\n//               Login\r\n//             </button>\r\n//           </>\r\n//         ) : (\r\n//           <>\r\n//             Do not have an account?{\" \"}\r\n//             <button className=\"text-indigo-600 hover:underline\" onClick={switchForm}>\r\n//               Sign Up\r\n//             </button>\r\n//           </>\r\n//         )}\r\n//       </p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default GeneralForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // app/signup/components/SignupForm.tsx\r\n// 'use client';\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n\r\n// interface User {\r\n//   username: string;\r\n//   email: string;\r\n//   phoneNo: string;\r\n//   address: string;\r\n//   password: string;\r\n// }\r\n\r\n// interface SignupFormProps {\r\n//   onSubmit: (user: User) => Promise<void>;\r\n// }\r\n\r\n// const SignupForm: React.FC<SignupFormProps> = ({ onSubmit }) => {\r\n//   const [user, setUser] = useState<User>({\r\n//     username: '',\r\n//     email: '',\r\n//     phoneNo: '',\r\n//     address: '',\r\n//     password: '',\r\n//   });\r\n\r\n//   const [buttonDisabled, setButtonDisabled] = useState(true);\r\n//   const [loading, setLoading] = useState(false);\r\n\r\n//   useEffect(() => {\r\n//     const { email, password, username } = user;\r\n//     setButtonDisabled(!(email && password && username));\r\n//   }, [user]);\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n//     setLoading(true); // Start loading\r\n//     await onSubmit(user); // Call onSubmit and wait for it to complete\r\n//     setLoading(false); // End loading\r\n//   };\r\n\r\n//   return (\r\n//     <form className=\"space-y-6\" onSubmit={handleSubmit}>\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Full Name</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={user.username}\r\n//           onChange={(e) => setUser({ ...user, username: e.target.value })}\r\n//           required\r\n//           className=\"w-full px-3 py-2 mt-1 border text-gray-700 rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Email</label>\r\n//         <input\r\n//           type=\"email\"\r\n//           value={user.email}\r\n//           onChange={(e) => setUser({ ...user, email: e.target.value })}\r\n//           required\r\n//           className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Phone Number</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={user.phoneNo}\r\n//           onChange={(e) => setUser({ ...user, phoneNo: e.target.value })}\r\n//           required\r\n//           className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Address</label>\r\n//         <input\r\n//           type=\"text\"\r\n//           value={user.address}\r\n//           onChange={(e) => setUser({ ...user, address: e.target.value })}\r\n//           required\r\n//           className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <label className=\"block text-sm font-medium text-gray-700\">Password</label>\r\n//         <input\r\n//           type=\"password\"\r\n//           value={user.password}\r\n//           onChange={(e) => setUser({ ...user, password: e.target.value })}\r\n//           required\r\n//           className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//         />\r\n//       </div>\r\n//       <button\r\n//         type=\"submit\"\r\n//         disabled={buttonDisabled || loading}\r\n//         className={`w-full px-4 py-2 font-semibold text-white rounded-md focus:outline-none focus:ring focus:ring-indigo-200 ${\r\n//           buttonDisabled || loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'\r\n//         }`}\r\n//       >\r\n//         {loading ? \"Submitting...\" : \"Sign Up\"}\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\n// export default SignupForm;\r\n\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 501, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/components/AuthLayout.tsx"],"sourcesContent":["// AuthLayout.tsx\r\nimport React from 'react';\r\n\r\nconst AuthLayout: React.FC<{ children: React.ReactNode; backgroundImage: string }> = ({ children, backgroundImage }) => {\r\n  return (\r\n    <div className=\"flex min-h-screen\">\r\n      <div\r\n        className=\"w-2/3 bg-cover bg-center\"\r\n        style={{ backgroundImage: `url(${backgroundImage})` }}\r\n      ></div>\r\n      <div className=\"w-1/2 flex items-center justify-center bg-gray-50\">\r\n      \r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthLayout;\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;;AAGjB,MAAM,aAA+E,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE;IACjH,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBACC,WAAU;gBACV,OAAO;oBAAE,iBAAiB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;gBAAC;;;;;;0BAEtD,8OAAC;gBAAI,WAAU;0BAEZ;;;;;;;;;;;;AAIT;uCAEe"}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/schemas/validationSchema.ts"],"sourcesContent":["// /schemas/validationSchema.ts\r\nimport * as yup from \"yup\";\r\n\r\nexport const signupSchema = yup.object({\r\n  username: yup.string().min(3, \"Username must be at least 3 characters\").required(\"Username is required\"),\r\n  email: yup.string().email(\"Enter a valid email\").required(\"Email is required\"),\r\n  phoneNo: yup.string().matches(/^\\d{10,15}$/, \"Enter a valid phone number\").required(\"Phone number is required\"),\r\n  address: yup.string().min(5, \"Address must be at least 5 characters\").required(\"Address is required\"),\r\n  password: yup.string().min(6, \"Password must be at least 6 characters\").required(\"Password is required\"),\r\n});\r\n\r\nexport const loginSchema = yup.object({\r\n  email: yup.string().email(\"Enter a valid email\").required(\"Email is required\"),\r\n  password: yup.string().required(\"Password is required\"),\r\n});\r\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;;AAC/B;;AAEO,MAAM,eAAe,oIAAI,MAAM,CAAC;IACrC,UAAU,oIAAI,MAAM,GAAG,GAAG,CAAC,GAAG,0CAA0C,QAAQ,CAAC;IACjF,OAAO,oIAAI,MAAM,GAAG,KAAK,CAAC,uBAAuB,QAAQ,CAAC;IAC1D,SAAS,oIAAI,MAAM,GAAG,OAAO,CAAC,eAAe,8BAA8B,QAAQ,CAAC;IACpF,SAAS,oIAAI,MAAM,GAAG,GAAG,CAAC,GAAG,yCAAyC,QAAQ,CAAC;IAC/E,UAAU,oIAAI,MAAM,GAAG,GAAG,CAAC,GAAG,0CAA0C,QAAQ,CAAC;AACnF;AAEO,MAAM,cAAc,oIAAI,MAAM,CAAC;IACpC,OAAO,oIAAI,MAAM,GAAG,KAAK,CAAC,uBAAuB,QAAQ,CAAC;IAC1D,UAAU,oIAAI,MAAM,GAAG,QAAQ,CAAC;AAClC"}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth-pages)/signup/page.tsx"],"sourcesContent":["// SignupPage.tsx\r\n'use client';\r\nimport React, { useState } from \"react\";\r\nimport GeneralForm from \"@/components/forms/GeneralForm\";\r\nimport axios from \"axios\";\r\nimport AuthLayout from \"@/components/AuthLayout\";\r\nimport { signupSchema } from \"@/schemas/validationSchema\";\r\n\r\nconst SignupPage = () => {\r\n  const router = useRouter();\r\n  const [signupError, setSignupError] = useState<string | null>(null);\r\n\r\n  const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n    try {\r\n      const response = await axios.post(\"/api/auth/signup\", user);\r\n      console.log(\"Signup successful\");\r\n      router.push(\"/login\");\r\n    } catch (error: any) {\r\n      if (error.response && error.response.status === 409) {\r\n        // If user already exists, show a message in the form\r\n        setSignupError(\"A user with this email already exists. Please use a different email.\");\r\n      } else {\r\n        setSignupError(\"Signup failed. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthLayout backgroundImage=\"https://wallpapers.com/images/hd/1920-x-1080-hd-c65hirjqswhsd1z3.jpg\">\r\n      <GeneralForm\r\n        fields={[\r\n          { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n          { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n          { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n          { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n          { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n        ]}\r\n        buttonText=\"Create Your Account\"\r\n        onSubmit={onSignUp}\r\n        validationSchema={signupSchema}\r\n        errorMessage={signupError}\r\n      />\r\n      \r\n    </AuthLayout>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // SignupPage.tsx\r\n// 'use client'\r\n// import React, { useState } from \"react\";\r\n// import GeneralForm from \"@/components/forms/GeneralForm\";\r\n// import axios from \"axios\";\r\n// import router from \"next/router\";\r\n// import AuthLayout from \"@/components/AuthLayout\"; \r\n// import { signupSchema } from \"@/schemas/validationSchema\";\r\n\r\n// const SignupPage = () => {\r\n//   const [serverError, setServerError] = useState<string | null>(null);\r\n\r\n//   const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n//     try {\r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup successful\");\r\n//       router.push('/login');\r\n//     } catch (error: any) {\r\n//       if (error.response?.data?.error) {\r\n//         setServerError(error.response.data.error);\r\n//       } else {\r\n//         setServerError(\"Signup failed. Please try again.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <AuthLayout backgroundImage=\"https://wallpapers.com/images/hd/1920-x-1080-hd-c65hirjqswhsd1z3.jpg\">\r\n//       <GeneralForm\r\n//         fields={[\r\n//           { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n//           { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n//           { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n//           { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n//           { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n//         ]}\r\n//         buttonText=\"Create Your Account\"\r\n//         onSubmit={onSignUp}\r\n//         validationSchema={signupSchema}\r\n//         serverError={serverError}\r\n//       />\r\n//       {signupError && <p className=\"text-red-600 text-center mt-4\">{signupError}</p>}\r\n//     </AuthLayout>\r\n//   );\r\n// };\r\n\r\n// export default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// 'use client'\r\n\r\n// import React from \"react\";\r\n// import GeneralForm from \"@/components/forms/GeneralForm\";\r\n// import axios from \"axios\";\r\n// import router from \"next/router\";\r\n\r\n\r\n\r\n// const SignupPage = () => {\r\n  \r\n//   const onSignUp = async (user: { username: string; email: string; phoneNo: string; address: string; password: string }) => {\r\n\r\n//     try {\r\n    \r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup sucess\")\r\n//       router.push('/login'); \r\n//     } catch (error:any) {\r\n//       console.log(\"Signup failed\", error.message);\r\n      \r\n  \r\n//   }\r\n \r\n\r\n//   };\r\n\r\n  \r\n//   return (\r\n//     <GeneralForm\r\n//       fields={[\r\n//         { name: \"username\", label: \"Full Name\", type: \"text\", required: true },\r\n//         { name: \"email\", label: \"Email\", type: \"email\", required: true },\r\n//         { name: \"phoneNo\", label: \"Phone Number\", type: \"text\", required: true },\r\n//         { name: \"address\", label: \"Address\", type: \"text\", required: true },\r\n//         { name: \"password\", label: \"Password\", type: \"password\", required: true },\r\n//       ]}\r\n//       buttonText=\"Create Your Account\"\r\n//       onSubmit={onSignUp}\r\n//       redirectPath=\"/login\" // Redirect after successful signup\r\n//     />\r\n//   );\r\n// };\r\n\r\n// export default SignupPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// /* eslint-disable @typescript-eslint/no-unused-vars */\r\n// 'use client'\r\n// import { useState,useEffect } from \"react\";\r\n// import Link from \"next/link\";\r\n// import { useRouter } from \"next/navigation\";\r\n// import axios from 'axios';\r\n// import React from \"react\";\r\n\r\n// const SignUp = () => {\r\n//   const [user, setUser] = useState({\r\n//     username: '',\r\n//     email: '',\r\n//     phoneNo: '',\r\n//     address: '',\r\n//     password: '',\r\n \r\n//   });\r\n// const [buttonDisabled,setButtonDisabled]  = useState(false)\r\n// const [loading,setLoading]=useState(false)\r\n// const router = useRouter();\r\n\r\n// useEffect(() => {\r\n//   if(user.email.length > 0 && user.password.length > 0 && user.username.length > 0) {\r\n//       setButtonDisabled(false);\r\n//   } else {\r\n//       setButtonDisabled(true);\r\n//   }\r\n// }, [user]);\r\n\r\n//   const onSignUp = async () => {\r\n\r\n//     try {\r\n//       setLoading(true)\r\n//       setButtonDisabled(true)\r\n//       const response = await axios.post(\"/api/auth/signup\", user);\r\n//       console.log(\"Signup sucess\")\r\n//       router.push('/login'); \r\n//     } catch (error:any) {\r\n//       console.log(\"Signup failed\", error.message);\r\n      \r\n  \r\n//   }finally {\r\n//     setTimeout(() => {\r\n//       setLoading(false);\r\n//       setButtonDisabled(false);\r\n//   }, 1000);\r\n//   }\r\n \r\n\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n//       <div className=\"w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md\">\r\n//         <h2 className=\"text-2xl font-bold text-center text-gray-800\">\r\n//           Create Your Account\r\n//         </h2>\r\n//         <form className=\"space-y-6\">\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Full Name\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.username}\r\n//               onChange={(e) => setUser({ ...user, username: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 border text-gray-700 rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Email\r\n//             </label>\r\n//             <input\r\n//               type=\"email\"\r\n//               value={user.email}\r\n//               onChange={(e) => setUser({ ...user, email: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1  text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Phone Number\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.phoneNo}\r\n//               onChange={(e) => setUser({ ...user, phoneNo: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Address\r\n//             </label>\r\n//             <input\r\n//               type=\"text\"\r\n//               value={user.address}\r\n//               onChange={(e) => setUser({ ...user, address: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label className=\"block text-sm font-medium text-gray-700\">\r\n//               Password\r\n//             </label>\r\n//             <input\r\n//               type=\"password\"\r\n//               value={user.password}\r\n//               onChange={(e) => setUser({ ...user, password: e.target.value })}\r\n//               required\r\n//               className=\"w-full px-3 py-2 mt-1 text-gray-700 border rounded-md focus:outline-none focus:ring focus:ring-indigo-200 focus:border-indigo-500\"\r\n//             />\r\n//           </div>\r\n         \r\n//           <button\r\n//             type=\"button\"\r\n//             onClick={onSignUp}\r\n//             disabled={buttonDisabled}\r\n//             className={`w-full px-4 py-2 font-semibold text-white rounded-md focus:outline-none focus:ring focus:ring-indigo-200 ${\r\n//                 buttonDisabled ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'\r\n//             }`}\r\n//         >\r\n//             {loading ? 'Processing...' : 'Sign Up'}\r\n//         </button>\r\n\r\n//         </form>\r\n//         <p className=\"text-sm text-center text-gray-600\">\r\n//           Already have an account?{\" \"}\r\n//           <Link href=\"/login\" className=\"text-indigo-600 hover:underline\">\r\n//            Login\r\n//           </Link>\r\n//         </p>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SignUp;\r\n// app/signup/page.tsx// app/signup/page.tsx"],"names":[],"mappings":"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"}},
    {"offset": {"line": 959, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
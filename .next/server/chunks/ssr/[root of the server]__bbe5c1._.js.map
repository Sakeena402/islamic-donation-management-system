{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/donation/page.tsx"],"sourcesContent":["// import { NextApiRequest, NextApiResponse } from 'next';\r\n// import Stripe from 'stripe';\r\n// import { PrismaClient } from '@prisma/client'; // Assuming you are using Prisma\r\n\r\n// const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2022-11-15' });\r\n// const prisma = new PrismaClient();\r\n\r\n// export default async function handler(req: NextApiRequest, res: NextApiResponse) {\r\n//   if (req.method === 'POST') {\r\n//     const { amount, type, paymentMethod, userID } = req.body;\r\n\r\n//     try {\r\n//       // Create Stripe payment intent\r\n//       const paymentIntent = await stripe.paymentIntents.create({\r\n//         amount: amount * 100, // Convert amount to cents\r\n//         currency: 'usd',\r\n//         payment_method_types: ['card'],\r\n//       });\r\n\r\n//       // Save donation in the database\r\n//       const donation = await prisma.donation.create({\r\n//         data: {\r\n//           Amount: amount,\r\n//           Type: type,\r\n//           PaymentMethod: paymentMethod,\r\n//           Date: Math.floor(Date.now() / 1000),\r\n//           UserID: userID,\r\n//           PaymentStatus: 'Pending',\r\n//         },\r\n//       });\r\n\r\n//       res.status(200).json({ success: true, clientSecret: paymentIntent.client_secret, donation });\r\n//     } catch (error) {\r\n//       console.error(error);\r\n//       res.status(500).json({ error: 'Internal server error' });\r\n//     }\r\n//   } else {\r\n//     res.setHeader('Allow', ['POST']);\r\n//     res.status(405).end(`Method ${req.method} Not Allowed`);\r\n//   }\r\n// }\r\n"],"names":[],"mappings":"AAAA,0DAA0D;AAC1D,+BAA+B;AAC/B,kFAAkF;AAElF,2FAA2F;AAC3F,qCAAqC;AAErC,qFAAqF;AACrF,iCAAiC;AACjC,gEAAgE;AAEhE,YAAY;AACZ,wCAAwC;AACxC,mEAAmE;AACnE,2DAA2D;AAC3D,2BAA2B;AAC3B,0CAA0C;AAC1C,YAAY;AAEZ,yCAAyC;AACzC,wDAAwD;AACxD,kBAAkB;AAClB,4BAA4B;AAC5B,wBAAwB;AACxB,0CAA0C;AAC1C,iDAAiD;AACjD,4BAA4B;AAC5B,sCAAsC;AACtC,aAAa;AACb,YAAY;AAEZ,sGAAsG;AACtG,wBAAwB;AACxB,8BAA8B;AAC9B,kEAAkE;AAClE,QAAQ;AACR,aAAa;AACb,wCAAwC;AACxC,+DAA+D;AAC/D,MAAM;AACN,IAAI"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
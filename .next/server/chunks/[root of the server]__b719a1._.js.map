{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/models/userModel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose'\r\n\r\n\r\nconst userSchema= new mongoose.Schema({\r\nusername:{\r\n    type:String,\r\n    required:[true,'Please enter your name'],\r\n},\r\nemail: {\r\n    type: String,\r\n    required: [true, 'Please enter your email'],\r\n    unique: true,\r\n   // match: [/.+@.+\\..+/, 'Please enter a valid email address'], \r\n   // maxlength: [50, 'Email cannot be longer than 50 characters']\r\n},\r\npassword: {\r\n    type: String,\r\n    required: [true, 'Please enter your password'],\r\n   \r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Password must contain at least one uppercase, one lowercase, one number, and one special character\r\n    //         return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(value);\r\n    //     },\r\n    //     message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\r\n    // }\r\n},\r\n\r\naddress: {\r\n    type: String,\r\n    required: [true, 'Please enter your address'],\r\n    trim: true \r\n},\r\nphoneNo: {\r\n    type: String,\r\n    required: [true, 'Please enter your phone number'],\r\n    unique: true,\r\n  //  match: [/^\\d{10,15}$/, 'Phone number must be between 10 and 15 digits'], // Ensures phone number has only digits and is the correct length\r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Check for any unwanted characters (only digits allowed)\r\n    //         return /^\\d+$/.test(value);\r\n    //     },\r\n    //     message: 'Phone number must contain only digits'\r\n    // }\r\n},\r\nrole: {\r\n    type: String,\r\n    enum: ['Admin', 'Donor', 'Organizer'],\r\n    default: 'Donor',\r\n    required: [true, 'Please specify a role']\r\n},\r\nisVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n},\r\nstatus:{\r\n    type:String,\r\n    enum:['Active','Inactive'],\r\n    default:'Active'\r\n},\r\nforgotPasswordToken: String,\r\nforgotPasswordTokenExpiry: Date,\r\nverifyToken: String,\r\nverifyTokenExpiry: Date,\r\n\r\n})\r\nconst User = mongoose.models.user || mongoose.model('user', userSchema);\r\nexport default User;"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAGA,MAAM,aAAY,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAS;QACL,MAAK;QACL,UAAS;YAAC;YAAK;SAAyB;IAC5C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IAGZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IASlD;IAEA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,MAAM;IACV;IACA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,QAAQ;IASZ;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;SAAY;QACrC,SAAS;QACT,UAAU;YAAC;YAAM;SAAwB;IAC7C;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,QAAO;QACH,MAAK;QACL,MAAK;YAAC;YAAS;SAAW;QAC1B,SAAQ;IACZ;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AAEnB;AACA,MAAM,OAAO,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/auth/verifyemail/route.ts"],"sourcesContent":["import connectDB from \"@/dbConfig/dbConfig\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport User from \"@/models/userModel\";\n\n// Ensure the database is connected\nconnectDB();\n\nexport async function POST(request: NextRequest) {\n    try {\n        const reqBody = await request.json();\n        const { token } = reqBody;\n\n        // Debug: Log the received token\n        console.log(\"Received token:\", token);\n\n        // Find user with valid token and expiry time in the future\n        const user = await User.findOne({\n            verifyToken: token,\n            verifyTokenExpiry: { $gt: Date.now() }\n        });\n\n\n\n        \n        // Check if user exists and token is valid\n        if (!user) {\n            return NextResponse.json({ error: \"Invalid or expired token\" }, { status: 400 });\n        }\n\n        // Debug: Log the user object before updating\n        console.log(\"User found:\", user);\n\n        // Update user verification status\n        user.isVerified = true;\n        user.verifyToken = undefined;\n        user.verifyTokenExpiry = undefined;\n\n        // await User.findOneAndUpdate(\n        //     { verifyToken: token, verifyTokenExpiry: { $gt: Date.now() } },\n        //     { $set: { isVerified: true, verifyToken: undefined, verifyTokenExpiry: undefined } },\n        //     { new: true } // Returns the updated document\n        // );\n        \n        console.log(\"Before save:\", user);\n        await user.save();\n        console.log(\"After save:\", user);\n        \n\n        return NextResponse.json({\n            message: \"Email verified successfully\",\n            success: true\n        });\n    } catch (error: any) {\n        console.error(\"Error during email verification:\", error.message);\n        return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,mCAAmC;AACnC,CAAA,GAAA,sHAAA,CAAA,UAAS,AAAD;AAED,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,gCAAgC;QAChC,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,2DAA2D;QAC3D,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAC5B,aAAa;YACb,mBAAmB;gBAAE,KAAK,KAAK,GAAG;YAAG;QACzC;QAKA,0CAA0C;QAC1C,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,6CAA6C;QAC7C,QAAQ,GAAG,CAAC,eAAe;QAE3B,kCAAkC;QAClC,KAAK,UAAU,GAAG;QAClB,KAAK,WAAW,GAAG;QACnB,KAAK,iBAAiB,GAAG;QAEzB,+BAA+B;QAC/B,sEAAsE;QACtE,4FAA4F;QAC5F,oDAAoD;QACpD,KAAK;QAEL,QAAQ,GAAG,CAAC,gBAAgB;QAC5B,MAAM,KAAK,IAAI;QACf,QAAQ,GAAG,CAAC,eAAe;QAG3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS;QACb;IACJ,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,oCAAoC,MAAM,OAAO;QAC/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
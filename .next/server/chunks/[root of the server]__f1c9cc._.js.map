{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/models/donationModel.ts"],"sourcesContent":["import mongoose from 'mongoose'\r\n\r\nconst DonationSchema = new mongoose.Schema({\r\n    amount: { type: Number, required: true },\r\n    donorId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\r\n    campaignId: { type: mongoose.Schema.Types.ObjectId, ref: 'Campaign', required: false }, // Nullable for general donations\r\n    purpose: { type: String, enum: ['zakat', 'fitra', 'sadqa', 'general'], required: true },\r\n    paymentMethod: { type: String, enum: ['Easypaisa', 'JazzCash', 'BankTransfer', 'Stripe'], required: true },\r\n    paymentStatus: { type: String, enum: ['pending', 'completed', 'failed'], default: 'pending' },\r\n    createdAt: { type: Date, default: Date.now }\r\n  });\r\n  \r\n \r\n  const Donation = mongoose.models.donation || mongoose.model('donation', DonationSchema);\r\nexport default Donation;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,QAAQ;QAAE,MAAM;QAAQ,UAAU;IAAK;IACvC,SAAS;QAAE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAK;IAC7E,YAAY;QAAE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAY,UAAU;IAAM;IACrF,SAAS;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAS;YAAS;SAAU;QAAE,UAAU;IAAK;IACtF,eAAe;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAa;YAAY;YAAgB;SAAS;QAAE,UAAU;IAAK;IACzG,eAAe;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAW;YAAa;SAAS;QAAE,SAAS;IAAU;IAC5F,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C;AAGA,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY;uCAC3D"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/donation/route.ts"],"sourcesContent":["import connectDB from '@/dbConfig/dbConfig';\r\nimport Donation from '@/models/donationModel';\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nconnectDB();\r\n\r\n// Helper function to verify token and extract user data\r\nconst verifyToken = (request: NextRequest) => {\r\n    const token = request.cookies.get('token');\r\n    if (!token) {\r\n        throw new Error('Unauthorized');\r\n    }\r\n\r\n    try {\r\n        const user = jwt.verify(token, process.env.JWT_SECRET_KEY!);\r\n        return user;\r\n    } catch {\r\n        throw new Error('Invalid token');\r\n    }\r\n};\r\n\r\n// Create Donation\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const user = verifyToken(request); // Verify and extract user data\r\n        const reqBody = await request.json();\r\n        const { amount, donorId, campaignId, paymentMethod } = reqBody;\r\n\r\n        // Validation\r\n        if (!amount || !donorId || !paymentMethod) {\r\n            return NextResponse.json(\r\n                { error: \"Amount, donorId, and paymentMethod are required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Ensure the donorId matches the user making the request\r\n        if (user.id !== donorId) {\r\n            return NextResponse.json(\r\n                { error: \"You can only donate for yourself\" },\r\n                { status: 403 }\r\n            );\r\n        }\r\n\r\n        // Create Donation\r\n        const donation = new Donation({\r\n            amount,\r\n            donorId,\r\n            campaignId,\r\n            paymentMethod,\r\n        });\r\n\r\n        await donation.save();\r\n\r\n        return NextResponse.json({\r\n            message: \"Donation created successfully\",\r\n            success: true,\r\n            status: 201,\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Server error:', error);\r\n        return NextResponse.json(\r\n            { error: error.message || 'Server error' },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n\r\n// Get Donations\r\nexport async function GET(request: NextRequest) {\r\n    try {\r\n        const user = verifyToken(request); // Verify and extract user data\r\n        const { searchParams } = new URL(request.url);\r\n        const donorId = searchParams.get('donorId');\r\n        const campaignId = searchParams.get('campaignId');\r\n\r\n        const filter: any = {};\r\n\r\n        // Authorization: User can only access their donations or donations related to their campaigns\r\n        if (donorId && donorId !== user.id) {\r\n            return NextResponse.json(\r\n                { error: \"You can only access your own donations\" },\r\n                { status: 403 }\r\n            );\r\n        }\r\n\r\n        // If campaignId is provided, ensure that the user is either an admin or the campaign creator\r\n        if (campaignId) {\r\n            const campaign = await Campaign.findById(campaignId);\r\n            if (!campaign) {\r\n                return NextResponse.json(\r\n                    { error: \"Campaign not found\" },\r\n                    { status: 404 }\r\n                );\r\n            }\r\n\r\n            if (user.role !== 'admin' && user.id !== campaign.createdBy.toString()) {\r\n                return NextResponse.json(\r\n                    { error: \"You are not authorized to view donations for this campaign\" },\r\n                    { status: 403 }\r\n                );\r\n            }\r\n            filter.campaignId = campaignId; // Add filter for campaignId\r\n        }\r\n\r\n        if (donorId) filter.donorId = donorId;\r\n\r\n        const donations = await Donation.find(filter).populate('donorId campaignId', 'username title');\r\n\r\n        return NextResponse.json({\r\n            success: true,\r\n            donations,\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Server error:', error);\r\n        return NextResponse.json(\r\n            { error: error.message || 'Server error' },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/campaign/route.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport connectDB from '@/dbConfig/dbConfig';\r\nimport Campaign from '@/models/campaignModel';\r\nimport { NextResponse, NextRequest } from 'next/server';\r\n\r\nconnectDB();\r\n\r\n// Helper function to verify token and extract user data\r\nconst verifyToken = (request: NextRequest) => {\r\n    const token = request.cookies.get('token');\r\n    if (!token) {\r\n        throw new Error('Authentication token missing');\r\n    }\r\n\r\n    try {\r\n        const user = jwt.verify(token, process.env.JWT_SECRET_KEY!);\r\n        return user;\r\n    } catch (error) {\r\n        throw new Error('Invalid or expired token');\r\n    }\r\n};\r\n\r\n// Success response helper\r\nconst successResponse = (message: string, data: any = null) => {\r\n    return NextResponse.json({\r\n        success: true,\r\n        message,\r\n        data,\r\n        status: 200,\r\n    });\r\n};\r\n\r\n// Error response helper\r\nconst errorResponse = (message: string, status: number = 400) => {\r\n    return NextResponse.json({\r\n        success: false,\r\n        error: message,\r\n        status,\r\n    });\r\n};\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const reqBody = await request.json();\r\n        const { title, description, image, category, targetAmount, requestedBy, createdBy } = reqBody;\r\n\r\n        // Validation\r\n        if (!title || !description || !targetAmount || !category || !requestedBy) {\r\n            return errorResponse(\"Title, description, targetAmount, category, and requestedBy are required\", 400);\r\n        }\r\n\r\n        // Ensure targetAmount is a number\r\n        const targetAmountNum = Number(targetAmount);\r\n        if (isNaN(targetAmountNum)) {\r\n            return errorResponse(\"Target Amount must be a valid number\", 400);\r\n        }\r\n\r\n        // Create Campaign\r\n        const campaign = new Campaign({\r\n            title,\r\n            description,\r\n            image,  // Image can be a URL or a file path; Ensure it is handled correctly\r\n            category,\r\n            targetAmount: targetAmountNum,  // Use the numeric value for targetAmount\r\n            requestedBy,\r\n            createdBy,\r\n        });\r\n\r\n        await campaign.save();\r\n\r\n        return successResponse(\"Campaign created successfully\", campaign);\r\n    } catch (error: any) {\r\n        console.error('Error creating campaign:', error);\r\n        return errorResponse(error.message || 'Server error while creating campaign', 500);\r\n    }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n    try {\r\n        const { searchParams } = new URL(request.url);\r\n        const category = searchParams.get('category'); // Get category from query params\r\n\r\n        const filter: any = {};\r\n        if (category) filter.category = category; // Apply filter for category\r\n\r\n        const campaigns = await Campaign.find(filter).populate('requestedBy createdBy', 'username email');\r\n\r\n        return successResponse(\"Campaigns fetched successfully\", campaigns);\r\n    } catch (error: any) {\r\n        console.error('Error fetching campaigns:', error);\r\n        return errorResponse(error.message || 'Server error while fetching campaigns', 500);\r\n    }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n    try {\r\n        const user = verifyToken(request); // Verify and extract user data\r\n        const reqBody = await request.json();\r\n        const { id, title, description, image, category, targetAmount } = reqBody;\r\n\r\n        // Validation\r\n        if (!id || (!title && !description && !image && !category && !targetAmount)) {\r\n            return errorResponse(\"ID and at least one field to update are required\", 400);\r\n        }\r\n\r\n        // Find the campaign\r\n        const campaign = await Campaign.findById(id);\r\n        if (!campaign) {\r\n            return errorResponse(\"Campaign not found\", 404);\r\n        }\r\n\r\n        // Security check: Ensure only admin or creator can update\r\n        if (user.role !== 'admin' && user.id !== String(campaign.createdBy)) {\r\n            return errorResponse(\"You are not authorized to update this campaign\", 403);\r\n        }\r\n\r\n        // Update fields\r\n        if (title) campaign.title = title;\r\n        if (description) campaign.description = description;\r\n        if (image) campaign.image = image;  // You might need extra logic to handle file uploads here\r\n        if (category) campaign.category = category;\r\n        if (targetAmount) campaign.targetAmount = Number(targetAmount);  // Ensure targetAmount is a number\r\n\r\n        await campaign.save();\r\n\r\n        return successResponse(\"Campaign updated successfully\", campaign);\r\n    } catch (error: any) {\r\n        console.error('Error updating campaign:', error);\r\n        return errorResponse(error.message || 'Server error while updating campaign', 500);\r\n    }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n    try {\r\n        const user = verifyToken(request); // Verify and extract user data\r\n        const { searchParams } = new URL(request.url);\r\n        const id = searchParams.get('id');\r\n\r\n        // Validation\r\n        if (!id) {\r\n            return errorResponse(\"Campaign ID is required\", 400);\r\n        }\r\n\r\n        // Find the campaign\r\n        const campaign = await Campaign.findById(id);\r\n        if (!campaign) {\r\n            return errorResponse(\"Campaign not found\", 404);\r\n        }\r\n\r\n        // Security check: Ensure only admin or creator can delete\r\n        if (user.role !== 'admin' && user.id !== String(campaign.createdBy)) {\r\n            return errorResponse(\"You are not authorized to delete this campaign\", 403);\r\n        }\r\n\r\n        await Campaign.findByIdAndDelete(id);\r\n\r\n        return successResponse(\"Campaign deleted successfully\");\r\n    } catch (error: any) {\r\n        console.error('Error deleting campaign:', error);\r\n        return errorResponse(error.message || 'Server error while deleting campaign', 500);\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/models/userModel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose'\r\n\r\n\r\nconst userSchema= new mongoose.Schema({\r\nusername:{\r\n    type:String,\r\n    required:[true,'Please enter your name'],\r\n},\r\nemail: {\r\n    type: String,\r\n    required: [true, 'Please enter your email'],\r\n    unique: true,\r\n   // match: [/.+@.+\\..+/, 'Please enter a valid email address'], \r\n   // maxlength: [50, 'Email cannot be longer than 50 characters']\r\n},\r\npassword: {\r\n    type: String,\r\n    required: [true, 'Please enter your password'],\r\n   \r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Password must contain at least one uppercase, one lowercase, one number, and one special character\r\n    //         return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(value);\r\n    //     },\r\n    //     message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\r\n    // }\r\n},\r\n\r\naddress: {\r\n    type: String,\r\n    required: [true, 'Please enter your address'],\r\n    trim: true \r\n},\r\nphoneNo: {\r\n    type: String,\r\n    required: [true, 'Please enter your phone number'],\r\n    unique: true,\r\n  //  match: [/^\\d{10,15}$/, 'Phone number must be between 10 and 15 digits'], // Ensures phone number has only digits and is the correct length\r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Check for any unwanted characters (only digits allowed)\r\n    //         return /^\\d+$/.test(value);\r\n    //     },\r\n    //     message: 'Phone number must contain only digits'\r\n    // }\r\n},\r\nrole: {\r\n    type: String,\r\n    enum: ['Admin', 'Donor', 'Organizer'],\r\n    default: 'Donor',\r\n    required: [true, 'Please specify a role']\r\n},\r\nisVerified: {\r\n    type: Boolean,\r\n    default: false,\r\n},\r\nstatus:{\r\n    type:String,\r\n    enum:['Active','Inactive'],\r\n    default:'Active'\r\n},\r\nforgotPasswordToken: String,\r\nforgotPasswordTokenExpiry: Date,\r\nverifyToken: String,\r\nverifyTokenExpiry: Date,\r\n\r\n})\r\nconst User = mongoose.models.user || mongoose.model('user', userSchema);\r\nexport default User;"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAGA,MAAM,aAAY,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAS;QACL,MAAK;QACL,UAAS;YAAC;YAAK;SAAyB;IAC5C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IAGZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IASlD;IAEA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,MAAM;IACV;IACA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,QAAQ;IASZ;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;SAAY;QACrC,SAAS;QACT,UAAU;YAAC;YAAM;SAAwB;IAC7C;IACA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IACA,QAAO;QACH,MAAK;QACL,MAAK;YAAC;YAAS;SAAW;QAC1B,SAAQ;IACZ;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AAEnB;AACA,MAAM,OAAO,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/helpers/mailer.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\nimport User from \"@/models/userModel\";\nimport bcryptjs from 'bcryptjs';\n\n\ninterface SendEmailParams {\n    email: string;\n    emailType: \"VERIFY\" | \"RESET\";\n    userId: string;\n}\n\nexport const sendEmail = async ({ email, emailType, userId }: SendEmailParams) => {\n    try {\n        // Generate a hashed token\n        const hashedToken = await bcryptjs.hash(userId.toString(), 10);\n\n        // Update the user model with the appropriate token and expiry time\n        const tokenUpdate = {\n            verifyToken: emailType === \"VERIFY\" ? hashedToken : undefined,\n            verifyTokenExpiry: emailType === \"VERIFY\" ? Date.now() + 3600000 : undefined,\n            forgotPasswordToken: emailType === \"RESET\" ? hashedToken : undefined,\n            forgotPasswordTokenExpiry: emailType === \"RESET\" ? Date.now() + 3600000 : undefined\n        };\n\n        await User.findByIdAndUpdate(userId, tokenUpdate, { new: true });\n\n        // Configure Nodemailer transport\n        const transport = nodemailer.createTransport({\n            host: process.env.MAILTRAP_HOST || \"sandbox.smtp.mailtrap.io\",\n            port: Number(process.env.MAILTRAP_PORT) || 587, // Use 587 or other specified port\n            auth: {\n                user: process.env.MAILTRAP_USER,\n                pass: process.env.MAILTRAP_PASSWORD\n            }\n        });\n\n        // Prepare the email content\n        const actionUrl = `${process.env.DOMAIN}/${emailType === \"VERIFY\" ? \"verifyemail\" : \"resetpassword\"}?token=${hashedToken}`;\n        const mailOptions = {\n            from: process.env.SENDER_EMAIL || 'sakeenaf315@gmail.com',\n            to: email,\n            subject: emailType === \"VERIFY\" ? \"Verify your Email\" : \"Reset your Password\",\n            html: `\n                <div style=\"font-family: Arial, sans-serif; padding: 20px; color: #333;\">\n                    <h2>${emailType === \"VERIFY\" ? \"Verify Your Email\" : \"Reset Your Password\"}</h2>\n                    <p>Click the link below to ${emailType === \"VERIFY\" ? \"verify your email address\" : \"reset your password\"}:</p>\n                    <a href=\"${actionUrl}\" style=\"background: #007BFF; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n                        ${emailType === \"VERIFY\" ? \"Verify Email\" : \"Reset Password\"}\n                    </a>\n                    <p>If you cannot click the link, copy and paste the following URL into your browser:</p>\n                    <p>${actionUrl}</p>\n                    <p>This link will expire in 1 hour.</p>\n                </div>\n            `\n        };\n\n        // Send the email\n        const mailResponse = await transport.sendMail(mailOptions);\n        console.log(`Email sent: ${mailResponse.response}`);\n        return mailResponse;\n\n    } catch (error: any) {\n        console.error(\"Error sending email:\", error.message);\n        throw new Error(\"Failed to send email. Please try again later.\");\n    }\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AASO,MAAM,YAAY,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAmB;IACzE,IAAI;QACA,0BAA0B;QAC1B,MAAM,cAAc,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,OAAO,QAAQ,IAAI;QAE3D,mEAAmE;QACnE,MAAM,cAAc;YAChB,aAAa,cAAc,WAAW,cAAc;YACpD,mBAAmB,cAAc,WAAW,KAAK,GAAG,KAAK,UAAU;YACnE,qBAAqB,cAAc,UAAU,cAAc;YAC3D,2BAA2B,cAAc,UAAU,KAAK,GAAG,KAAK,UAAU;QAC9E;QAEA,MAAM,qHAAA,CAAA,UAAI,CAAC,iBAAiB,CAAC,QAAQ,aAAa;YAAE,KAAK;QAAK;QAE9D,iCAAiC;QACjC,MAAM,YAAY,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YACzC,MAAM,QAAQ,GAAG,CAAC,aAAa,IAAI;YACnC,MAAM,OAAO,QAAQ,GAAG,CAAC,aAAa,KAAK;YAC3C,MAAM;gBACF,MAAM,QAAQ,GAAG,CAAC,aAAa;gBAC/B,MAAM,QAAQ,GAAG,CAAC,iBAAiB;YACvC;QACJ;QAEA,4BAA4B;QAC5B,MAAM,YAAY,GAAG,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,cAAc,WAAW,gBAAgB,gBAAgB,OAAO,EAAE,aAAa;QAC1H,MAAM,cAAc;YAChB,MAAM,QAAQ,GAAG,CAAC,YAAY,IAAI;YAClC,IAAI;YACJ,SAAS,cAAc,WAAW,sBAAsB;YACxD,MAAM,CAAC;;wBAEK,EAAE,cAAc,WAAW,sBAAsB,sBAAsB;+CAChD,EAAE,cAAc,WAAW,8BAA8B,sBAAsB;6BACjG,EAAE,UAAU;wBACjB,EAAE,cAAc,WAAW,iBAAiB,iBAAiB;;;uBAG9D,EAAE,UAAU;;;YAGvB,CAAC;QACL;QAEA,iBAAiB;QACjB,MAAM,eAAe,MAAM,UAAU,QAAQ,CAAC;QAC9C,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,aAAa,QAAQ,EAAE;QAClD,OAAO;IAEX,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,wBAAwB,MAAM,OAAO;QACnD,MAAM,IAAI,MAAM;IACpB;AACJ"}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/auth/signup/route.ts"],"sourcesContent":["// /app/api/auth/signup/route.ts (or your relevant path)\r\nimport connectDB from '@/dbConfig/dbConfig';\r\nimport User from '@/models/userModel';\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport bcryptjs from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { sendEmail } from '@/helpers/mailer';\r\n;\r\n\r\nconnectDB();\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const reqBody = await request.json();\r\n        const { username, email, phoneNo, address, password } = reqBody;\r\n\r\n        // Validation\r\n        if (!username || !email || !phoneNo || !address || !password) {\r\n            return NextResponse.json(\r\n                { error: \"All fields are required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Check if user already exists\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            return NextResponse.json(\r\n                { error: \"User already exists\" },\r\n                { status: 409 }\r\n            );\r\n        }\r\n\r\n        // Hash password\r\n        const salt = await bcryptjs.genSalt(10);\r\n        const hashedPassword = await bcryptjs.hash(password, salt);\r\n\r\n        // Create new user\r\n        const newUser = new User({\r\n            username,\r\n            email,\r\n            phoneNo,\r\n            address,\r\n            password: hashedPassword\r\n        });\r\n\r\n        const savedUser = await newUser.save();\r\n        await sendEmail({email, emailType: \"VERIFY\", userId: savedUser._id})\r\n\r\n        return NextResponse.json({\r\n            message: \"User created Successfully\",\r\n            success: true,\r\n            status: 201\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Server error:', error);  // Log specific error details\r\n        return NextResponse.json(\r\n            { error: error.message || 'Server error' },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n"],"names":[],"mappings":"AAAA,wDAAwD;;;;AACxD;AACA;AACA;AACA;AAEA;;;;;;AAGA,CAAA,GAAA,sHAAA,CAAA,UAAS,AAAD;AAED,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG;QAExD,aAAa;QACb,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU;YAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,gBAAgB;QAChB,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACpC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU;QAErD,kBAAkB;QAClB,MAAM,UAAU,IAAI,qHAAA,CAAA,UAAI,CAAC;YACrB;YACA;YACA;YACA;YACA,UAAU;QACd;QAEA,MAAM,YAAY,MAAM,QAAQ,IAAI;QACpC,MAAM,CAAA,GAAA,mHAAA,CAAA,YAAS,AAAD,EAAE;YAAC;YAAO,WAAW;YAAU,QAAQ,UAAU,GAAG;QAAA;QAElE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS;YACT,QAAQ;QACZ;IACJ,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,iBAAiB,QAAS,6BAA6B;QACrE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAe,GACzC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
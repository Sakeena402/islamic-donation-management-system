{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/models/campaignModel.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst CampaignSchema = new mongoose.Schema({\r\n    title: { type: String, required: true },\r\n    description: { type: String, required: true },\r\n    image: {\r\n      type: String, // URL to store the image (can be from cloud storage like AWS S3, Firebase, or other services)\r\n      required: false, // Set to true if the image is mandatory\r\n    },\r\n    category: { \r\n      type: String, \r\n      enum: ['education', 'healthcare', 'environment', 'others'], // Example categories\r\n      required: true,\r\n    },\r\n    purpose: { type: String, enum: ['zakat', 'fitra', 'sadqa', 'general'], required: true },\r\n    targetAmount: { type: Number, required: true },\r\n    collectedAmount: { type: Number, default: 0.00 },\r\n    startDate: { type: Date, required: true },\r\n    endDate: { type: Date, required: true },\r\n    requestedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: false }, // Organizer ID\r\n    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: false }, // Admin ID\r\n    isApproved: { type: Boolean, default: true },\r\n    isActive: { type: Boolean, default: true },\r\n    createdAt: { type: Date, default: Date.now },\r\n    updatedAt: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Campaign = mongoose.models.campaign || mongoose.model('campaign', CampaignSchema);\r\nexport default Campaign;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,iBAAiB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACvC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,OAAO;QACL,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,MAAM;YAAC;YAAa;YAAc;YAAe;SAAS;QAC1D,UAAU;IACZ;IACA,SAAS;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAS;YAAS;YAAS;SAAU;QAAE,UAAU;IAAK;IACtF,cAAc;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC7C,iBAAiB;QAAE,MAAM;QAAQ,SAAS;IAAK;IAC/C,WAAW;QAAE,MAAM;QAAM,UAAU;IAAK;IACxC,SAAS;QAAE,MAAM;QAAM,UAAU;IAAK;IACtC,aAAa;QAAE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAM;IAClF,WAAW;QAAE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;QAAQ,UAAU;IAAM;IAChF,YAAY;QAAE,MAAM;QAAS,SAAS;IAAK;IAC3C,UAAU;QAAE,MAAM;QAAS,SAAS;IAAK;IACzC,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC/C;AAEA,MAAM,WAAW,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY;uCACzD"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 200, "column": 0}, "map": {"version":3,"sources":["file://E%3A/islamic-donation-management-system/app/api/campaign/route.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport connectDB from '@/dbConfig/dbConfig';\r\nimport Campaign from '@/models/campaignModel';\r\nimport { NextResponse, NextRequest } from 'next/server';\r\n\r\n// Connect to the database\r\nconnectDB();\r\n\r\n// Helper function to verify the JWT token and extract user data securely\r\nconst verifyToken = (request: NextRequest) => {\r\n  const token = request.cookies.get('token');\r\n  if (!token) {\r\n    throw new Error('Authentication token missing');\r\n  }\r\n\r\n  try {\r\n    // Verify the JWT token and extract user data\r\n    const decoded: any = jwt.verify(token, process.env.JWT_SECRET_KEY!);\r\n    if (!decoded || !decoded.id || !decoded.role) {\r\n      throw new Error('Invalid token data');\r\n    }\r\n    return decoded; // Returning the user data (id, role) from token\r\n  } catch (error) {\r\n    throw new Error('Invalid or expired token');\r\n  }\r\n};\r\n\r\n// Helper function for successful responses\r\nconst successResponse = (message: string, data: any = null) => {\r\n  return NextResponse.json({\r\n    success: true,\r\n    message,\r\n    data,\r\n    status: 200,\r\n  });\r\n};\r\n\r\n// Helper function for error responses\r\nconst errorResponse = (message: string, status: number = 400) => {\r\n  return NextResponse.json({\r\n    success: false,\r\n    error: message,\r\n    status,\r\n  });\r\n};\r\n\r\n// POST Request: Create a new campaign\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const reqBody = await request.json();\r\n    const { title, description, image, category, purpose, targetAmount, startDate, endDate, createdBy, requestedBy } = reqBody;\r\n\r\n    // Validation\r\n    if (!title || !description || !targetAmount || !category || !purpose || !startDate || !endDate || !createdBy) {\r\n      return errorResponse('All fields are required', 400);\r\n    }\r\n\r\n    const targetAmountNum = Number(targetAmount);\r\n    if (isNaN(targetAmountNum)) {\r\n      return errorResponse('Target Amount must be a valid number', 400);\r\n    }\r\n\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\r\n      return errorResponse('Invalid start or end date', 400);\r\n    }\r\n\r\n    if (start >= end) {\r\n      return errorResponse('Start Date must be before End Date', 400);\r\n    }\r\n\r\n    // Handle image upload (Here, assuming it's a base64 or URL. If using cloud storage, replace with actual logic)\r\n    let imageUrl = '';\r\n    if (image) {\r\n      imageUrl = image; // Handle image upload logic here (e.g., AWS S3)\r\n    }\r\n\r\n    // Create a new campaign document\r\n    const campaign = new Campaign({\r\n      title,\r\n      description,\r\n      image: imageUrl,\r\n      category,\r\n      purpose,\r\n      targetAmount: targetAmountNum,\r\n      startDate: start,\r\n      endDate: end,\r\n      requestedBy,\r\n      createdBy,\r\n      isApproved: true,\r\n      isActive: true,\r\n    });\r\n\r\n    // Save the campaign to MongoDB\r\n    await campaign.save();\r\n    return successResponse('Campaign created successfully', campaign);\r\n  } catch (error: any) {\r\n    console.error('Error creating campaign:', error);\r\n    return errorResponse(error.message || 'Server error while creating campaign', 500);\r\n  }\r\n}\r\n\r\n// GET Request: Fetch campaigns\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const category = searchParams.get('category'); // Get category from query params\r\n\r\n    const filter: any = {};\r\n    if (category) filter.category = category; // Apply filter for category\r\n\r\n    const campaigns = await Campaign.find(filter)\r\n      .populate('requestedBy createdBy', 'username email'); // Populate user data (username, email)\r\n\r\n    return successResponse('Campaigns fetched successfully', campaigns);\r\n  } catch (error: any) {\r\n    console.error('Error fetching campaigns:', error);\r\n    return errorResponse(error.message || 'Server error while fetching campaigns', 500);\r\n  }\r\n}\r\n\r\n// PUT Request: Update a campaign\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    const user = verifyToken(request); // Verify token and extract user data\r\n    const reqBody = await request.json();\r\n    const { id, title, description, image, category, purpose, targetAmount, startDate, endDate, isApproved, isActive } = reqBody;\r\n\r\n    // Validation\r\n    if (!id || (!title && !description && !image && !category && !purpose && !targetAmount && !startDate && !endDate)) {\r\n      return errorResponse('ID and at least one field to update are required', 400);\r\n    }\r\n\r\n    // Find the campaign by ID\r\n    const campaign = await Campaign.findById(id);\r\n    if (!campaign) {\r\n      return errorResponse('Campaign not found', 404);\r\n    }\r\n\r\n    // Check authorization (only admin or the campaign creator can update)\r\n    if (user.role !== 'admin' && user.id !== String(campaign.createdBy)) {\r\n      return errorResponse('You are not authorized to update this campaign', 403);\r\n    }\r\n\r\n    // Update the campaign with the new values\r\n    if (title) campaign.title = title;\r\n    if (description) campaign.description = description;\r\n    if (image) campaign.image = image;  // Handle image upload if needed\r\n    if (category) campaign.category = category;\r\n    if (purpose) campaign.purpose = purpose;\r\n    if (targetAmount) campaign.targetAmount = Number(targetAmount);\r\n    if (startDate) campaign.startDate = new Date(startDate);\r\n    if (endDate) campaign.endDate = new Date(endDate);\r\n    if (isApproved !== undefined) campaign.isApproved = isApproved;\r\n    if (isActive !== undefined) campaign.isActive = isActive;\r\n\r\n    await campaign.save();\r\n    return successResponse('Campaign updated successfully', campaign);\r\n  } catch (error: any) {\r\n    console.error('Error updating campaign:', error);\r\n    return errorResponse(error.message || 'Server error while updating campaign', 500);\r\n  }\r\n}\r\n\r\n// DELETE Request: Delete a campaign\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const user = verifyToken(request); // Verify token and extract user data\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id'); // Get campaign ID from query params\r\n\r\n    // Validation\r\n    if (!id) {\r\n      return errorResponse('Campaign ID is required', 400);\r\n    }\r\n\r\n    // Find the campaign\r\n    const campaign = await Campaign.findById(id);\r\n    if (!campaign) {\r\n      return errorResponse('Campaign not found', 404);\r\n    }\r\n\r\n    // Check authorization (only admin or the campaign creator can delete)\r\n    if (user.role !== 'admin' && user.id !== String(campaign.createdBy)) {\r\n      return errorResponse('You are not authorized to delete this campaign', 403);\r\n    }\r\n\r\n    await Campaign.findByIdAndDelete(id);\r\n    return successResponse('Campaign deleted successfully');\r\n  } catch (error: any) {\r\n    console.error('Error deleting campaign:', error);\r\n    return errorResponse(error.message || 'Server error while deleting campaign', 500);\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
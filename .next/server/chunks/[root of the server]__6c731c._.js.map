{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/models/userModel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose'\r\n\r\n\r\nconst userSchema= new mongoose.Schema({\r\nusername:{\r\n    type:String,\r\n    required:[true,'Please enter your name'],\r\n},\r\nemail: {\r\n    type: String,\r\n    required: [true, 'Please enter your email'],\r\n    unique: true,\r\n   // match: [/.+@.+\\..+/, 'Please enter a valid email address'], \r\n   // maxlength: [50, 'Email cannot be longer than 50 characters']\r\n},\r\npassword: {\r\n    type: String,\r\n    required: [true, 'Please enter your password'],\r\n   \r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Password must contain at least one uppercase, one lowercase, one number, and one special character\r\n    //         return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(value);\r\n    //     },\r\n    //     message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\r\n    // }\r\n},\r\n\r\naddress: {\r\n    type: String,\r\n    required: [true, 'Please enter your address'],\r\n    trim: true \r\n},\r\nphoneNo: {\r\n    type: String,\r\n    required: [true, 'Please enter your phone number'],\r\n    unique: true,\r\n  //  match: [/^\\d{10,15}$/, 'Phone number must be between 10 and 15 digits'], // Ensures phone number has only digits and is the correct length\r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Check for any unwanted characters (only digits allowed)\r\n    //         return /^\\d+$/.test(value);\r\n    //     },\r\n    //     message: 'Phone number must contain only digits'\r\n    // }\r\n},\r\nrole: {\r\n    type: String,\r\n    enum: ['Admin', 'Donor', 'Organizer'],\r\n    default: 'Donor',\r\n    required: [true, 'Please specify a role']\r\n},\r\nisVerfied: {\r\n    type: Boolean,\r\n    default: false,\r\n},\r\nstatus:{\r\n    type:String,\r\n    enum:['Active','Inactive'],\r\n    default:'Active'\r\n},\r\nforgotPasswordToken: String,\r\nforgotPasswordTokenExpiry: Date,\r\nverifyToken: String,\r\nverifyTokenExpiry: Date,\r\n\r\n})\r\nconst User = mongoose.models.user || mongoose.model('user', userSchema);\r\nexport default User;"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAGA,MAAM,aAAY,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAS;QACL,MAAK;QACL,UAAS;YAAC;YAAK;SAAyB;IAC5C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IAGZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IASlD;IAEA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,MAAM;IACV;IACA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,QAAQ;IASZ;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;SAAY;QACrC,SAAS;QACT,UAAU;YAAC;YAAM;SAAwB;IAC7C;IACA,WAAW;QACP,MAAM;QACN,SAAS;IACb;IACA,QAAO;QACH,MAAK;QACL,MAAK;YAAC;YAAS;SAAW;QAC1B,SAAQ;IACZ;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AAEnB;AACA,MAAM,OAAO,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/auth/signup/route.ts"],"sourcesContent":["// /app/api/auth/signup/route.ts (or your relevant path)\r\nimport connectDB from '@/dbConfig/dbConfig';\r\nimport User from '@/models/userModel';\r\nimport { NextResponse, NextRequest } from 'next/server';\r\nimport bcryptjs from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n;\r\n\r\nconnectDB();\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        const reqBody = await request.json();\r\n        const { username, email, phoneNo, address, password } = reqBody;\r\n\r\n        // Validation\r\n        if (!username || !email || !phoneNo || !address || !password) {\r\n            return NextResponse.json(\r\n                { error: \"All fields are required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Check if user already exists\r\n        const existingUser = await User.findOne({ email });\r\n        if (existingUser) {\r\n            return NextResponse.json(\r\n                { error: \"User already exists\" },\r\n                { status: 409 }\r\n            );\r\n        }\r\n\r\n        // Hash password\r\n        const salt = await bcryptjs.genSalt(10);\r\n        const hashedPassword = await bcryptjs.hash(password, salt);\r\n\r\n        // Create new user\r\n        const newUser = new User({\r\n            username,\r\n            email,\r\n            phoneNo,\r\n            address,\r\n            password: hashedPassword\r\n        });\r\n\r\n        const savedUser = await newUser.save();\r\n\r\n        return NextResponse.json({\r\n            message: \"User created Successfully\",\r\n            success: true,\r\n            status: 201\r\n        });\r\n    } catch (error: any) {\r\n        console.error('Server error:', error);  // Log specific error details\r\n        return NextResponse.json(\r\n            { error: error.message || 'Server error' },\r\n            { status: 500 }\r\n        );\r\n    }\r\n}\r\n"],"names":[],"mappings":"AAAA,wDAAwD;;;;AACxD;AACA;AACA;AACA;;;;;AAIA,CAAA,GAAA,sHAAA,CAAA,UAAS,AAAD;AAED,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,UAAU,MAAM,QAAQ,IAAI;QAClC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG;QAExD,aAAa;QACb,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU;YAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAEtB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QAChD,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,gBAAgB;QAChB,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACpC,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAQ,CAAC,IAAI,CAAC,UAAU;QAErD,kBAAkB;QAClB,MAAM,UAAU,IAAI,qHAAA,CAAA,UAAI,CAAC;YACrB;YACA;YACA;YACA;YACA,UAAU;QACd;QAEA,MAAM,YAAY,MAAM,QAAQ,IAAI;QAEpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;YACT,SAAS;YACT,QAAQ;QACZ;IACJ,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,iBAAiB,QAAS,6BAA6B;QACrE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAe,GACzC;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/dbConfig/dbConfig.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose';\r\n\r\nexport default async function connectDB() {\r\n    try {\r\n        mongoose.connect(process.env.MONGO_URI!)\r\n        const connection = await mongoose.connection;\r\n        connection.on('connected',()=>\r\n            console.log(\"MongoDB connected Successfully\"))\r\n        connection.on('error',(err)=>{console.log(`MONGODB Connection Error. Please cmake sure MongoDB is running : ${err}`) \r\n            process.exit()\r\n        })\r\n\r\n    } catch (error) {\r\n        console.log(`Database Connection Error : ${error}`)\r\n    }\r\n}"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAEe,eAAe;IAC1B,IAAI;QACA,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,SAAS;QACtC,MAAM,aAAa,MAAM,iGAAA,CAAA,UAAQ,CAAC,UAAU;QAC5C,WAAW,EAAE,CAAC,aAAY,IACtB,QAAQ,GAAG,CAAC;QAChB,WAAW,EAAE,CAAC,SAAQ,CAAC;YAAO,QAAQ,GAAG,CAAC,CAAC,iEAAiE,EAAE,KAAK;YAC/G,QAAQ,IAAI;QAChB;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO;IACtD;AACJ"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/models/userModel.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport mongoose from 'mongoose'\r\n\r\n\r\nconst userSchema= new mongoose.Schema({\r\nusername:{\r\n    type:String,\r\n    required:[true,'Please enter your name'],\r\n},\r\nemail: {\r\n    type: String,\r\n    required: [true, 'Please enter your email'],\r\n    unique: true,\r\n   // match: [/.+@.+\\..+/, 'Please enter a valid email address'], \r\n   // maxlength: [50, 'Email cannot be longer than 50 characters']\r\n},\r\npassword: {\r\n    type: String,\r\n    required: [true, 'Please enter your password'],\r\n   \r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Password must contain at least one uppercase, one lowercase, one number, and one special character\r\n    //         return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(value);\r\n    //     },\r\n    //     message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character'\r\n    // }\r\n},\r\n\r\naddress: {\r\n    type: String,\r\n    required: [true, 'Please enter your address'],\r\n    trim: true \r\n},\r\nphoneNo: {\r\n    type: String,\r\n    required: [true, 'Please enter your phone number'],\r\n    unique: true,\r\n  //  match: [/^\\d{10,15}$/, 'Phone number must be between 10 and 15 digits'], // Ensures phone number has only digits and is the correct length\r\n    // validate: {\r\n    //     validator: function(value:string) {\r\n    //         // Check for any unwanted characters (only digits allowed)\r\n    //         return /^\\d+$/.test(value);\r\n    //     },\r\n    //     message: 'Phone number must contain only digits'\r\n    // }\r\n},\r\nrole: {\r\n    type: String,\r\n    enum: ['Admin', 'Donor', 'Organizer'],\r\n    default: 'Donor',\r\n    required: [true, 'Please specify a role']\r\n},\r\nisVerfied: {\r\n    type: Boolean,\r\n    default: false,\r\n},\r\nstatus:{\r\n    type:String,\r\n    enum:['Active','Inactive'],\r\n    default:'Active'\r\n},\r\nforgotPasswordToken: String,\r\nforgotPasswordTokenExpiry: Date,\r\nverifyToken: String,\r\nverifyTokenExpiry: Date,\r\n\r\n})\r\nconst User = mongoose.models.user || mongoose.model('user', userSchema);\r\nexport default User;"],"names":[],"mappings":"AAAA,oDAAoD;;;AACpD;;AAGA,MAAM,aAAY,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,UAAS;QACL,MAAK;QACL,UAAS;YAAC;YAAK;SAAyB;IAC5C;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;QAC3C,QAAQ;IAGZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IASlD;IAEA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,MAAM;IACV;IACA,SAAS;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,QAAQ;IASZ;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAS;YAAS;SAAY;QACrC,SAAS;QACT,UAAU;YAAC;YAAM;SAAwB;IAC7C;IACA,WAAW;QACP,MAAM;QACN,SAAS;IACb;IACA,QAAO;QACH,MAAK;QACL,MAAK;YAAC;YAAS;SAAW;QAC1B,SAAQ;IACZ;IACA,qBAAqB;IACrB,2BAA2B;IAC3B,aAAa;IACb,mBAAmB;AAEnB;AACA,MAAM,OAAO,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/auth/login/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport connectDB from '@/dbConfig/dbConfig'\r\nimport User from '@/models/userModel'\r\nimport { NextResponse,NextRequest } from 'next/server'\r\nimport bcryptjs from  'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\nimport { JWT_SECRET_KEY } from 'process'\r\nconnectDB()\r\n\r\n\r\nexport async function POST(request:NextRequest){\r\ntry {\r\n    const reqBody= await request.json()\r\n    const{email,password} = reqBody\r\n    console.log(reqBody)\r\n\r\n    \r\n    const user = await User.findOne({email})\r\n\r\n    if(!user){\r\n        return NextResponse.json(\r\n            {error:\"User doesn't exists\"},\r\n            {status:400}\r\n        )\r\n    }\r\n        //check if password is correct\r\n    const validPassword = await bcryptjs.compare(password, user.password)\r\n    if(!validPassword){\r\n        return NextResponse.json({error: \"Invalid password\"}, {status: 400})\r\n    }\r\n    console.log(user);\r\n\r\n//create token \r\n    const tokenData={\r\n        id:user._id,\r\n        username:user.username,\r\n        email:user.email,\r\n        role:user.role\r\n    }\r\n    const token =await jwt.sign(tokenData,process.env.JWT_SECRET_KEY!,{expiresIn:'1d'})\r\n\r\n   const response= NextResponse.json({\r\n        message:\"User login Successfully\",\r\n        sucess:true,\r\n        status:201 }\r\n    )\r\n    response.cookies.set(\"token\",token,{\r\n        httpOnly:true,\r\n    })\r\n    return response\r\n} catch (error:any) { \r\n    console.error('Validation errors:', error.errors);  // Log specific error details\r\n    return NextResponse.json(\r\n        { error: error.message || 'Server error' },\r\n        { status: 500 }\r\n)\r\n}\r\n}\r\n"],"names":[],"mappings":"AAAA,qDAAqD,GACrD,oDAAoD;;;AACpD;AACA;AACA;AACA;AACA;;;;;;AAEA,CAAA,GAAA,sHAAA,CAAA,UAAS,AAAD;AAGD,eAAe,KAAK,OAAmB;IAC9C,IAAI;QACA,MAAM,UAAS,MAAM,QAAQ,IAAI;QACjC,MAAK,EAAC,KAAK,EAAC,QAAQ,EAAC,GAAG;QACxB,QAAQ,GAAG,CAAC;QAGZ,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAC;QAAK;QAEtC,IAAG,CAAC,MAAK;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAC,OAAM;YAAqB,GAC5B;gBAAC,QAAO;YAAG;QAEnB;QACI,8BAA8B;QAClC,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QACpE,IAAG,CAAC,eAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAC,OAAO;YAAkB,GAAG;gBAAC,QAAQ;YAAG;QACtE;QACA,QAAQ,GAAG,CAAC;QAEhB,eAAe;QACX,MAAM,YAAU;YACZ,IAAG,KAAK,GAAG;YACX,UAAS,KAAK,QAAQ;YACtB,OAAM,KAAK,KAAK;YAChB,MAAK,KAAK,IAAI;QAClB;QACA,MAAM,QAAO,MAAM,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,WAAU,QAAQ,GAAG,CAAC,cAAc,EAAE;YAAC,WAAU;QAAI;QAElF,MAAM,WAAU,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC7B,SAAQ;YACR,QAAO;YACP,QAAO;QAAI;QAEf,SAAS,OAAO,CAAC,GAAG,CAAC,SAAQ,OAAM;YAC/B,UAAS;QACb;QACA,OAAO;IACX,EAAE,OAAO,OAAW;QAChB,QAAQ,KAAK,CAAC,sBAAsB,MAAM,MAAM,GAAI,6BAA6B;QACjF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAe,GACzC;YAAE,QAAQ;QAAI;IAEtB;AACA"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}